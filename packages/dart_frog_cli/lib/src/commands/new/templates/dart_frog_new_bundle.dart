// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final dartFrogNewBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "{{filename}}",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmRhcnRfZnJvZy9kYXJ0X2Zyb2cuZGFydCc7Cnt7I2lzX3JvdXRlfX0Ke3s+IHJvdXRlLmRhcnR9fQp7ey9pc19yb3V0ZX19e3teaXNfcm91dGV9fQp7ez4gbWlkZGxld2FyZS5kYXJ0fX0Ke3svaXNfcm91dGV9fQ==",
      "type": "text"
    },
    {
      "path": "{{~ middleware.dart }}",
      "data":
          "SGFuZGxlciBtaWRkbGV3YXJlKEhhbmRsZXIgaGFuZGxlcikgewogIHJldHVybiBoYW5kbGVyLnVzZShyZXF1ZXN0TG9nZ2VyKCkpOwp9Cg==",
      "type": "text"
    },
    {
      "path": "{{~ route.dart }}",
      "data":
          "e3tecGFyYW1zfX1SZXNwb25zZSBvblJlcXVlc3QoUmVxdWVzdENvbnRleHQgY29udGV4dCkgewp7ey9wYXJhbXN9fXt7I3BhcmFtcy4wfX1SZXNwb25zZSBvblJlcXVlc3QoCiAgUmVxdWVzdENvbnRleHQgY29udGV4dCx7eyNwYXJhbXN9fQogIFN0cmluZyB7ey59fSx7ey9wYXJhbXN9fQopIHsKe3svcGFyYW1zLjB9fSAgcmV0dXJuIFJlc3BvbnNlKGJvZHk6ICdXZWxjb21lIHRvIERhcnQgRnJvZyEnKTsKfQo=",
      "type": "text"
    }
  ],
  "hooks": [
    {
      "path": "post_gen.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJyBhcyBpbzsKaW1wb3J0ICdwYWNrYWdlOm1hc29uL21hc29uLmRhcnQnOwoKRnV0dXJlPHZvaWQ+IHJ1bihIb29rQ29udGV4dCBjb250ZXh0KSBhc3luYyB7CiAgZmluYWwgZGlybmFtZSA9IGNvbnRleHQudmFyc1snZGlybmFtZSddIGFzIFN0cmluZzsKICBmaW5hbCBmaWxlbmFtZSA9IGNvbnRleHQudmFyc1snZmlsZW5hbWUnXSBhcyBTdHJpbmc7CiAgaW8uRGlyZWN0b3J5KGRpcm5hbWUpLmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICBpby5GaWxlKGZpbGVuYW1lKS5yZW5hbWVTeW5jKCckZGlybmFtZS8kZmlsZW5hbWUnKTsKfQo=",
      "type": "text"
    },
    {
      "path": "pre_gen.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "pubspec.yaml",
      "data":
          "bmFtZTogZGFydF9mcm9nX25ld19ob29rcwpwdWJsaXNoX3RvOiBub25lCgplbnZpcm9ubWVudDoKICBzZGs6ICI+PTIuMTkuMCA8My4wLjAiCgpkZXBlbmRlbmNpZXM6CiAgZGFydF9mcm9nX2dlbjogXjAuMy4yCiAgbWFzb246ICI+PTAuMS4wLWRldi40OSA8MC4xLjAiCiAgcGF0aDogXjEuOC4wCgpkZXZfZGVwZW5kZW5jaWVzOgogIG1vY2t0YWlsOiBeMC4zLjAKICB0ZXN0OiBeMS4xOS4yCiAgdmVyeV9nb29kX2FuYWx5c2lzOiBeNC4wLjAKCmRlcGVuZGVuY3lfb3ZlcnJpZGVzOgogIGRhcnRfZnJvZ19nZW46CiAgICBnaXQ6CiAgICAgIHVybDogaHR0cHM6Ly9naXRodWIuY29tL1ZlcnlHb29kT3BlblNvdXJjZS9kYXJ0X2Zyb2cKICAgICAgcmVmOiByZW5hbi9uZXctcm91dGUtY29tbWFuZAogICAgICBwYXRoOiBwYWNrYWdlcy9kYXJ0X2Zyb2dfZ2VuCg==",
      "type": "text"
    }
  ],
  "name": "dart_frog_new",
  "description": "Create a new dart frog route or middleware",
  "version": "0.0.0+never",
  "environment": {"mason": ">=0.1.0-dev <0.1.0"},
  "readme": {
    "path": "README.md",
    "data":
        "IyBkYXJ0X2Zyb2dfbmV3CgpbIVtQb3dlcmVkIGJ5IE1hc29uXShodHRwczovL2ltZy5zaGllbGRzLmlvL2VuZHBvaW50P3VybD1odHRwcyUzQSUyRiUyRnRpbnl1cmwuY29tJTJGbWFzb24tYmFkZ2UpXShodHRwczovL2dpdGh1Yi5jb20vZmVsYW5nZWwvbWFzb24pCgpBIGRhcnQgZnJvZyBuZXcgcm91dGUgYnJpY2sKCl9HZW5lcmF0ZWQgYnkgW21hc29uXVsxXSDwn6exXwoKWzFdOiBodHRwczovL2dpdGh1Yi5jb20vZmVsYW5nZWwvbWFzb24K",
    "type": "text"
  },
  "license": {
    "path": "LICENSE",
    "data":
        "TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgMjAyMyBWZXJ5IEdvb2QgVmVudHVyZXMKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsCmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUKU09GVFdBUkUuCg==",
    "type": "text"
  },
  "vars": {
    "route_path": {
      "type": "string",
      "description": "The path for the desired route",
      "prompt": "What is the path for the desired route?"
    },
    "type": {
      "type": "enum",
      "description": "the type of hing to be created",
      "default": "route",
      "prompt": "What type of thing do you want to create?",
      "values": ["route", "middleware"]
    }
  }
});
