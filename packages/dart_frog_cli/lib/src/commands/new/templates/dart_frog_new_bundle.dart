// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final dartFrogNewBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "{{filename}}",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmRhcnRfZnJvZy9kYXJ0X2Zyb2cuZGFydCc7Cnt7I2lzX3JvdXRlfX0Ke3s+IHJvdXRlLmRhcnR9fQp7ey9pc19yb3V0ZX19e3sjaXNfbWlkZGxld2FyZX19Cnt7PiBtaWRkbGV3YXJlLmRhcnR9fQp7ey9pc19taWRkbGV3YXJlfX0=",
      "type": "text"
    },
    {
      "path": "{{~ middleware.dart }}",
      "data":
          "SGFuZGxlciBtaWRkbGV3YXJlKEhhbmRsZXIgaGFuZGxlcikgewogIC8vIFRPRE86IGltcGxlbWVudCBtaWRkbGV3YXJlCiAgcmV0dXJuIGhhbmRsZXI7Cn0=",
      "type": "text"
    },
    {
      "path": "{{~ route.dart }}",
      "data":
          "e3tecGFyYW1zfX1SZXNwb25zZSBvblJlcXVlc3QoUmVxdWVzdENvbnRleHQgY29udGV4dCkgewp7ey9wYXJhbXN9fXt7I3BhcmFtcy4wfX1SZXNwb25zZSBvblJlcXVlc3QoCiAgUmVxdWVzdENvbnRleHQgY29udGV4dCx7eyNwYXJhbXN9fQogIFN0cmluZyB7eyNjYW1lbENhc2V9fXt7Ln19e3svY2FtZWxDYXNlfX0se3svcGFyYW1zfX0KKSB7Cnt7L3BhcmFtcy4wfX0gIC8vIFRPRE86IGltcGxlbWVudCByb3V0ZSBoYW5kbGVyCiAgcmV0dXJuIFJlc3BvbnNlKGJvZHk6ICdUaGlzIGlzIGEgbmV3IHJvdXRlIScpOwp9",
      "type": "text"
    }
  ],
  "hooks": [
    {
      "path": "lib/post_gen.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJyBhcyBpbzsKCmltcG9ydCAncGFja2FnZTpkYXJ0X2Zyb2dfbmV3X2hvb2tzL3NyYy9leGl0X292ZXJyaWRlcy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm1hc29uL21hc29uLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6cGF0aC9wYXRoLmRhcnQnIGFzIHBhdGg7Cgp2b2lkIF9kZWZhdWx0RXhpdChpbnQgY29kZSkgPT4gRXhpdE92ZXJyaWRlcy5jdXJyZW50Py5leGl0ID8/IGlvLmV4aXQ7CgpGdXR1cmU8dm9pZD4gcG9zdEdlbigKICBIb29rQ29udGV4dCBjb250ZXh0LCB7CiAgaW8uRGlyZWN0b3J5PyBkaXJlY3RvcnksCiAgdm9pZCBGdW5jdGlvbihpbnQgZXhpdENvZGUpIGV4aXQgPSBfZGVmYXVsdEV4aXQsCn0pIGFzeW5jIHsKICBmaW5hbCBzdWNjZWVkZWQgPSBjb250ZXh0LnZhcnMuY29udGFpbnNLZXkoJ2Rpcl9wYXRoJyk7CiAgaWYgKCFzdWNjZWVkZWQpIHsKICAgIHJldHVybiBleGl0KDEpOwogIH0KCiAgZmluYWwgZGlyUGF0aCA9IGNvbnRleHQudmFyc1snZGlyX3BhdGgnXSBhcyBTdHJpbmc7CiAgZmluYWwgY3VycmVudERpcmVjdG9yeSA9IGRpcmVjdG9yeSA/PyBpby5EaXJlY3RvcnkuY3VycmVudDsKCiAgZmluYWwgY29udGFpbmluZ0RpcmVjdG9yeVBhdGggPSBwYXRoLnJlbGF0aXZlKAogICAgaW8uRGlyZWN0b3J5KHBhdGguam9pbihjdXJyZW50RGlyZWN0b3J5LnBhdGgsIGRpclBhdGgpKS5wYXRoLAogICk7CiAgZmluYWwgZmlsZW5hbWUgPSBjb250ZXh0LnZhcnNbJ2ZpbGVuYW1lJ10gYXMgU3RyaW5nOwogIHRyeSB7CiAgICBpby5EaXJlY3RvcnkoY29udGFpbmluZ0RpcmVjdG9yeVBhdGgpLmNyZWF0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICAgIGlvLkZpbGUoCiAgICAgIHBhdGguam9pbihjdXJyZW50RGlyZWN0b3J5LnBhdGgsIGZpbGVuYW1lKSwKICAgICkucmVuYW1lU3luYygnJGNvbnRhaW5pbmdEaXJlY3RvcnlQYXRoLyRmaWxlbmFtZScpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBjb250ZXh0LmxvZ2dlci5lcnIoJyRlcnJvcicpOwogICAgcmV0dXJuIGV4aXQoMSk7CiAgfQp9Cg==",
      "type": "text"
    },
    {
      "path": "lib/pre_gen.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/src/exit_overrides.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmFzeW5jJzsKaW1wb3J0ICdkYXJ0OmlvJyBhcyBpbzsKCmNvbnN0IF9hc3luY1J1blpvbmVkID0gcnVuWm9uZWQ7CgphYnN0cmFjdCBjbGFzcyBFeGl0T3ZlcnJpZGVzIHsKICBzdGF0aWMgZmluYWwgX3Rva2VuID0gT2JqZWN0KCk7CgogIHN0YXRpYyBFeGl0T3ZlcnJpZGVzPyBnZXQgY3VycmVudCB7CiAgICByZXR1cm4gWm9uZS5jdXJyZW50W190b2tlbl0gYXMgRXhpdE92ZXJyaWRlcz87CiAgfQoKICBzdGF0aWMgUiBydW5ab25lZDxSPihSIEZ1bmN0aW9uKCkgYm9keSwge3ZvaWQgRnVuY3Rpb24oaW50KT8gZXhpdH0pIHsKICAgIGZpbmFsIG92ZXJyaWRlcyA9IF9FeGl0T3ZlcnJpZGVzU2NvcGUoZXhpdCk7CiAgICByZXR1cm4gX2FzeW5jUnVuWm9uZWQoYm9keSwgem9uZVZhbHVlczoge190b2tlbjogb3ZlcnJpZGVzfSk7CiAgfQoKICB2b2lkIEZ1bmN0aW9uKGludCBleGl0Q29kZSkgZ2V0IGV4aXQgPT4gaW8uZXhpdDsKfQoKY2xhc3MgX0V4aXRPdmVycmlkZXNTY29wZSBleHRlbmRzIEV4aXRPdmVycmlkZXMgewogIF9FeGl0T3ZlcnJpZGVzU2NvcGUodGhpcy5fZXhpdCk7CgogIGZpbmFsIEV4aXRPdmVycmlkZXM/IF9wcmV2aW91cyA9IEV4aXRPdmVycmlkZXMuY3VycmVudDsKICBmaW5hbCB2b2lkIEZ1bmN0aW9uKGludCBleGl0Q29kZSk/IF9leGl0OwoKICBAb3ZlcnJpZGUKICB2b2lkIEZ1bmN0aW9uKGludCBleGl0Q29kZSkgZ2V0IGV4aXQgewogICAgcmV0dXJuIF9leGl0ID8/IF9wcmV2aW91cz8uZXhpdCA/PyBzdXBlci5leGl0OwogIH0KfQo=",
      "type": "text"
    },
    {
      "path": "lib/src/normalize_route_path.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmRhcnRfZnJvZ19uZXdfaG9va3Mvc3JjL3BhcmFtZXRlcl9zeW50YXguZGFydCc7CgpTdHJpbmcgbm9ybWFsaXplUm91dGVQYXRoKFN0cmluZyByb3V0ZVBhdGgpIHsKICBmaW5hbCByZXBsYWNlZCA9IHJvdXRlUGF0aC50b0RpYW1vbmRQYXJhbWV0ZXJTeW50YXgucmVwbGFjZUFsbChyJ1wnLCAnLycpOwoKICBmaW5hbCBzZWdtZW50cyA9IHJlcGxhY2VkLnNwbGl0KCcvJyk7CgogIGZpbmFsIG5vcm1hbGl6ZWRTZWdtZW50cyA9CiAgICAgIHNlZ21lbnRzLmZvbGQoPFN0cmluZz5bXSwgKHByZXZpb3VzVmFsdWUsIHNlZ21lbnQpIHsKICAgIGlmIChzZWdtZW50ID09ICcuLicpIHsKICAgICAgaWYgKHByZXZpb3VzVmFsdWUubGVuZ3RoID4gMSkgewogICAgICAgIHByZXZpb3VzVmFsdWUucmVtb3ZlTGFzdCgpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKHNlZ21lbnQuaXNOb3RFbXB0eSAmJiBzZWdtZW50ICE9ICcuJykgewogICAgICBwcmV2aW91c1ZhbHVlLmFkZChzZWdtZW50LmVuY29kZVNlZ21lbnQoKSk7CiAgICB9CiAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTsKICB9KTsKCiAgcmV0dXJuICcvJHtub3JtYWxpemVkU2VnbWVudHMuam9pbignLycpfSc7Cn0KCmV4dGVuc2lvbiBvbiBTdHJpbmcgewogIFN0cmluZyBlbmNvZGVTZWdtZW50KCkgewogICAgZmluYWwgZW5jb2RlZCA9IFVyaS5lbmNvZGVDb21wb25lbnQodGhpcyk7CiAgICBpZiAoaGFzRGlhbW9uZFBhcmFtZXRlcikgewogICAgICByZXR1cm4gZW5jb2RlZC5yZXBsYWNlQWxsKCclM0MnLCAnPCcpLnJlcGxhY2VBbGwoJyUzRScsICc+Jyk7CiAgICB9CiAgICByZXR1cm4gZW5jb2RlZDsKICB9Cn0K",
      "type": "text"
    },
    {
      "path": "lib/src/parameter_syntax.dart",
      "data":
          "ZXh0ZW5zaW9uIFBhcmFtZXRlclN5bnRheCBvbiBTdHJpbmcgewogIC8vLyBSZXBsYWNlcyBbXSBmb3IgPD4KICBTdHJpbmcgZ2V0IHRvRGlhbW9uZFBhcmFtZXRlclN5bnRheCB7CiAgICByZXR1cm4gcmVwbGFjZUFsbCgnWycsICc8JykucmVwbGFjZUFsbCgnXScsICc+Jyk7CiAgfQoKICAvLy8gUmVwbGFjZXMgPD4gZm9yIFtdCiAgU3RyaW5nIGdldCB0b0JyYWNrZXRQYXJhbWV0ZXJTeW50YXggewogICAgcmV0dXJuIHJlcGxhY2VBbGwoJzwnLCAnWycpLnJlcGxhY2VBbGwoJz4nLCAnXScpOwogIH0KCiAgLy8vIERldGVjdCBpZiB0aGUgZ2l2ZW4gc3RyaW5nIGhhcyBhIDwgYW5kIGEgPiBhZnRlciBpdAogIGJvb2wgZ2V0IGhhc0RpYW1vbmRQYXJhbWV0ZXIgewogICAgZmluYWwgcmVnZXhwID0gUmVnRXhwKCc8Lio/PicpOwogICAgcmV0dXJuIHJlZ2V4cC5oYXNNYXRjaCh0aGlzKTsKICB9CgogIC8vLyBHZXQgdGhlIHJvdXRlIHBhcmFtZXRlcnMgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nLgogIExpc3Q8U3RyaW5nPiBnZXRQYXJhbWV0ZXJOYW1lcygpIHsKICAgIGZpbmFsIHJlZ2V4cCA9IFJlZ0V4cChyJ1xbKC4qPylcXScpOwogICAgZmluYWwgbmFtZXMgPSByZWdleHAKICAgICAgICAuYWxsTWF0Y2hlcyh0b0JyYWNrZXRQYXJhbWV0ZXJTeW50YXgpCiAgICAgICAgLm1hcCgobSkgPT4gbVswXT8ucmVwbGFjZUFsbChSZWdFeHAocidbXFtcXV0nKSwgJycpKQogICAgICAgIC53aGVyZSgoZWwpID0+IGVsICE9IG51bGwpCiAgICAgICAgLmNhc3Q8U3RyaW5nPigpOwoKICAgIGZpbmFsIGR1cGxpY2F0ZXMgPSBuYW1lcwogICAgICAgIC50b1NldCgpCiAgICAgICAgLndoZXJlKChlbGVtZW50KSA9PiBuYW1lcy53aGVyZSgoZWwpID0+IGVsID09IGVsZW1lbnQpLmxlbmd0aCA+IDEpOwogICAgaWYgKGR1cGxpY2F0ZXMuaXNOb3RFbXB0eSkgewogICAgICBmaW5hbCBwbHVyYWwgPSBkdXBsaWNhdGVzLmxlbmd0aCA+IDE7CiAgICAgIGZpbmFsIG1lc3NhZ2UgPSAnRHVwbGljYXRlIHBhcmFtZXRlciBuYW1lJHtwbHVyYWwgPyAncycgOiAnJ30gZm91bmQ6ICcKICAgICAgICAgICcke2R1cGxpY2F0ZXMuam9pbignLCAnKX0nOwogICAgICB0aHJvdyBGb3JtYXRFeGNlcHRpb24obWVzc2FnZSk7CiAgICB9CgogICAgcmV0dXJuIG5hbWVzLnRvTGlzdCgpOwogIH0KfQo=",
      "type": "text"
    },
    {
      "path": "lib/src/route_configuration_utils.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmRhcnRfZnJvZ19nZW4vZGFydF9mcm9nX2dlbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm1hc29uL21hc29uLmRhcnQnOwoKZXh0ZW5zaW9uIFJvdXRlQ29uZmlndXJhdGlvblV0aWxzIG9uIFJvdXRlQ29uZmlndXJhdGlvbiB7CiAgLy8vIFJlcG9ydCByb2d1ZSByb3V0ZXMgYW5kIHJvdXRlIGNvbmZsaWN0cy4KICB2b2lkIHZhbGlkYXRlKCkgewogICAgcmVwb3J0Um9ndWVSb3V0ZXMoCiAgICAgIHRoaXMsCiAgICAgIG9uUm9ndWVSb3V0ZTogKGZpbGVQYXRoLCBpZGVhbFBhdGgpIHsKICAgICAgICB0aHJvdyBGb3JtYXRFeGNlcHRpb24oCiAgICAgICAgICAnJydSb2d1ZSByb3V0ZSBkZXRlY3RlZC4ke2RlZmF1bHRGb3JlZ3JvdW5kLndyYXAoJyAnKX1SZW5hbWUgJHtsaWdodEN5YW4ud3JhcChmaWxlUGF0aCl9IHRvICR7bGlnaHRDeWFuLndyYXAoaWRlYWxQYXRoKX0uJycnLAogICAgICAgICk7CiAgICAgIH0sCiAgICApOwoKICAgIHJlcG9ydFJvdXRlQ29uZmxpY3RzKAogICAgICB0aGlzLAogICAgICBvblJvdXRlQ29uZmxpY3Q6ICgKICAgICAgICBTdHJpbmcgb3JpZ2luYWxGaWxlUGF0aCwKICAgICAgICBTdHJpbmcgY29uZmxpY3RpbmdGaWxlUGF0aCwKICAgICAgICBTdHJpbmcgY29uZmxpY3RpbmdFbmRwb2ludCwKICAgICAgKSB7CiAgICAgICAgdGhyb3cgRm9ybWF0RXhjZXB0aW9uKAogICAgICAgICAgJycnUm91dGUgY29uZmxpY3QgZGV0ZWN0ZWQuICR7bGlnaHRDeWFuLndyYXAob3JpZ2luYWxGaWxlUGF0aCl9IGFuZCAke2xpZ2h0Q3lhbi53cmFwKGNvbmZsaWN0aW5nRmlsZVBhdGgpfSBib3RoIHJlc29sdmUgdG8gJHtsaWdodEN5YW4ud3JhcChjb25mbGljdGluZ0VuZHBvaW50KX0uJycnLAogICAgICAgICk7CiAgICAgIH0sCiAgICApOwogIH0KCiAgLy8vIENoZWNrIGlmIHRoZSBhbmNlc3RvcnMgb2YgYSByb3V0ZSBleGlzdHMgYXMgZmlsZSByb3V0ZXMuCiAgLy8vIFJldHVybiB0aGUgaW5uZXJtb3N0IHJvdXRlIHRoYXQgZXhpc3RzIGFzIGZpbGUgcm91dGUgaWYgYW55LgogIC8vLwogIC8vLyBPbiBEYXJ0IEZyb2csIGZpbGUgcm91dGVzIGFyZSByb3V0ZXMgZGVmaW5lZCBieSBhIGZpbGUgdGhhdCBoYXMgdGhlIGxhc3QKICAvLy8gc2VnbWVudCBvZiB0aGUgcmVzdWx0aW5nIFVSSSBhcyBpdHMgbmFtZSwgYXMgb3Bwb3NlZCB0byBpbmRleAogIC8vLyByb3V0ZXMgdGhhdCBhcmUgcmVwcmVzZW50ZWQgYnkgYW4gaW5kZXggZmlsZS4KICAvLy8KICAvLy8gVGhpcyBhc3N1bWVzIHRoYXQgdGhlIHJvdXRlIGNvbmZpZ3VyYXRpb24gaGFzIGJlZW4gdmFsaWRhdGVkIGFnYWluc3Qgcm9ndWUKICAvLy8gcm91dGVzIGFuZCByb3V0ZSBjb25mbGljdHMuCiAgLy8vCiAgLy8vIEl0IGFsc28gYXNzdW1lcyB0aGF0IHRoZSBbcm91dGVdIGlzIG5vcm1hbGl6ZWQgdG8gdXNlIHRoZSBzYW1lIHBhcmFtZXRlcgogIC8vLyBzeW50YXggYXMgdXNlZCBpbnRlcm5hbGx5IGJ5IFtSb3V0ZUNvbmZpZ3VyYXRpb25dLgogIC8vLwogIC8vLyBFeGFtcGxlOgogIC8vLyBGb3IgdGhlIHJvdXRlIGAvdXNlcnMvW2lkXS9wb3N0cy9bcG9zdF9pZF1gLCBpdCB2ZXJpZmllcyB0aGUgZXhpc3RlbmNlIG9mCiAgLy8vIGFueSBvZiB0aGUgZm9sbG93aW5nIHJvdXRlcywgaW4gdGhpcyBvcmRlcjoKICAvLy8gLSBgL3VzZXJzL1tpZF0vcG9zdHMuZGFydGAKICAvLy8gLSBgL3VzZXJzL1tpZF0uZGFydGAKICAvLy8gLSBgL3VzZXJzLmRhcnRgCiAgUm91dGVGaWxlPyBjb250YWluaW5nRmlsZVJvdXRlKAogICAgU3RyaW5nIHJvdXRlLCB7CiAgICBib29sIGluY2x1ZGVTZWxmID0gZmFsc2UsCiAgfSkgewogICAgZmluYWwgc2VnbWVudHMgPSByb3V0ZS5zcGxpdCgnLycpOwogICAgZmluYWwgY29udGFpbmluZ1JvdXRlcyA9IHNlZ21lbnRzCiAgICAgICAgLm1hcCgoc2VnbWVudCkgewogICAgICAgICAgcmV0dXJuIHNlZ21lbnRzLnRha2VXaGlsZSgoZWxlbWVudCkgPT4gZWxlbWVudCAhPSBzZWdtZW50KS5qb2luKCcvJyk7CiAgICAgICAgfSkKICAgICAgICAud2hlcmUoKHJvdXRlKSA9PiByb3V0ZS5pc05vdEVtcHR5KQogICAgICAgIC50b0xpc3QoKTsKCiAgICBpZiAoaW5jbHVkZVNlbGYpIHsKICAgICAgY29udGFpbmluZ1JvdXRlcy5hZGQocm91dGUpOwogICAgfQoKICAgIGZvciAoZmluYWwgY29udGFpbmluZ1JvdXRlIGluIGNvbnRhaW5pbmdSb3V0ZXMucmV2ZXJzZWQpIHsKICAgICAgaWYgKCFlbmRwb2ludHMuY29udGFpbnNLZXkoY29udGFpbmluZ1JvdXRlKSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CgogICAgICBmaW5hbCByb3V0ZUZpbGUgPSBlbmRwb2ludHNbY29udGFpbmluZ1JvdXRlXSEuZmlyc3Q7CgogICAgICAvLyBIRVVSSVNUSUM6IGluZGV4IHJvdXRlcyBoYXZlIHBhdGhzIHRvIHRoZSByb3V0ZSBmaWxlLAogICAgICAvLyB3aGljaCBuYW1lZCAnaW5kZXguZGFydCcKICAgICAgZmluYWwgaXNJbmRleFJvdXRlID0gcm91dGVGaWxlLnBhdGguZW5kc1dpdGgoJ2luZGV4LmRhcnQnKTsKCiAgICAgIC8vIElmIHRoZSByb3V0ZSBpcyBhbiBpbmRleCByb3V0ZSwgdGhlcmUgd29udCBiZSBmaWxlIHJvdXRlcyBvbiB0aGUKICAgICAgLy8gdXBwZXIgbGV2ZWwsIGFzc3VtaW5nIHRoYXQgdGhlcmUgaXMgbm8gcm9ndWUgcm91dGVzIG9uCiAgICAgIC8vIHRoZSBjb25maWd1cmF0aW9uLgogICAgICBpZiAoaXNJbmRleFJvdXRlKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgcmV0dXJuIHJvdXRlRmlsZTsKICAgIH0KICAgIHJldHVybiBudWxsOwogIH0KfQo=",
      "type": "text"
    },
    {
      "path": "lib/src/route_to_path.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOnBhdGgvcGF0aC5kYXJ0JyBhcyBwYXRoOwoKLy8vIENvbnZlcnQgYSByb3V0ZSB0byBhIGZpbGUgcGF0aC4KLy8vCi8vLyBJZiBbcHJlZmVySW5kZXhdIGlzIHRydWUsIHRoZSBwYXRoIHdpbGwgYmUgY29udmVydGVkIHRvIGEgZGlyZWN0b3J5IHBhdGgKLy8vIHdpdGggYW4gaW5kZXggZGFydCBmaWxlLgovLy8KLy8vIGBgYAovLy8gIi8iIC0+ICIuL3JvdXRlcy9pbmRleC5kYXJ0IiAoaWYgcHJlZmVySW5kZXggaXMgZmFsc2UpCi8vLyAiLyIgLT4gIi4vcm91dGVzL2luZGV4LmRhcnQiIChpZiBwcmVmZXJJbmRleCBpcyB0cnVlKQovLy8gIi9oZWxsbyIgLT4gIi4vcm91dGVzL2hlbGxvLmRhcnQiIChpZiBwcmVmZXJJbmRleCBpcyBmYWxzZSkKLy8vICIvaGVsbG8iIC0+ICIuL3JvdXRlcy9oZWxsby9pbmRleC5kYXJ0IiAoaWYgcHJlZmVySW5kZXggaXMgdHJ1ZSkKLy8vICIvaGVsbG8vW25hbWVdIiAtPiAiLi9yb3V0ZXMvaGVsbG8vW25hbWVdLmRhcnQiIChpZiBwcmVmZXJJbmRleCBpcyBmYWxzZSkKLy8vICIvaGVsbG8vW25hbWVdIiAtPiAiLi9yb3V0ZXMvaGVsbG8vW25hbWVdL2luZGV4LmRhcnQiIChpZiBwcmVmZXJJbmRleCBpcyB0cnVlKQpTdHJpbmcgcm91dGVUb1BhdGgoCiAgU3RyaW5nIHJvdXRlLCB7CiAgYm9vbCBwcmVmZXJJbmRleCA9IGZhbHNlLAogIFN0cmluZyBwcmVhbWJsZSA9ICdyb3V0ZXMnLAogIHBhdGguQ29udGV4dD8gcGF0aENvbnRleHQsCn0pIHsKICBmaW5hbCBjb250ZXh0ID0gcGF0aENvbnRleHQgPz8gcGF0aC5jb250ZXh0OwogIGZpbmFsIHNlcGFyYXRvciA9IGNvbnRleHQuc2VwYXJhdG9yOwoKICBpZiAocm91dGUgPT0gJy8nKSB7CiAgICByZXR1cm4gJyRwcmVhbWJsZSR7c2VwYXJhdG9yfWluZGV4LmRhcnQnOwogIH0KCiAgZmluYWwgcCA9CiAgICAgIHJvdXRlLnNwbGl0KCcvJykud2hlcmUoKGVsZW1lbnQpID0+IGVsZW1lbnQuaXNOb3RFbXB0eSkuam9pbihzZXBhcmF0b3IpOwoKICBpZiAocHJlZmVySW5kZXgpIHsKICAgIGZpbmFsIHBhdGhXaXRoSW5kZXggPSBjb250ZXh0LmpvaW4ocCwgJ2luZGV4LmRhcnQnKTsKICAgIHJldHVybiBjb250ZXh0LmpvaW4ocHJlYW1ibGUsIHBhdGhXaXRoSW5kZXgpOwogIH0KCiAgZmluYWwgcGF0aFdpdGhFeHRlbnNpb24gPSAnJHAuZGFydCc7CiAgcmV0dXJuIGNvbnRleHQuam9pbihwcmVhbWJsZSwgcGF0aFdpdGhFeHRlbnNpb24pOwp9Cg==",
      "type": "text"
    },
    {
      "path": "post_gen.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmRhcnRfZnJvZ19uZXdfaG9va3MvcG9zdF9nZW4uZGFydCc7CmltcG9ydCAncGFja2FnZTptYXNvbi9tYXNvbi5kYXJ0JzsKCkZ1dHVyZTx2b2lkPiBydW4oSG9va0NvbnRleHQgY29udGV4dCkgPT4gcG9zdEdlbihjb250ZXh0KTsK",
      "type": "text"
    },
    {
      "path": "pre_gen.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmRhcnRfZnJvZ19uZXdfaG9va3MvcHJlX2dlbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm1hc29uL21hc29uLmRhcnQnOwoKRnV0dXJlPHZvaWQ+IHJ1bihIb29rQ29udGV4dCBjb250ZXh0KSBhc3luYyA9PiBwcmVHZW4oY29udGV4dCk7Cg==",
      "type": "text"
    },
    {
      "path": "pubspec.yaml",
      "data":
          "bmFtZTogZGFydF9mcm9nX25ld19ob29rcwpwdWJsaXNoX3RvOiBub25lCgplbnZpcm9ubWVudDoKICBzZGs6ICI+PTMuMC4wIDw0LjAuMCIKCmRlcGVuZGVuY2llczoKICBkYXJ0X2Zyb2dfZ2VuOiBeMi4wLjAKICBtYXNvbjogXjAuMS4wLWRldi40OQogIHBhdGg6IF4xLjguMAoKZGV2X2RlcGVuZGVuY2llczoKICBtb2NrdGFpbDogXjEuMC4wCiAgdGVzdDogXjEuMTkuMgogIHZlcnlfZ29vZF9hbmFseXNpczogXjUuMS4wCg==",
      "type": "text"
    },
    {
      "path": "test/post_gen_test.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJyBhcyBpbzsKCmltcG9ydCAncGFja2FnZTpkYXJ0X2Zyb2dfbmV3X2hvb2tzL3Bvc3RfZ2VuLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6ZGFydF9mcm9nX25ld19ob29rcy9zcmMvZXhpdF9vdmVycmlkZXMuZGFydCc7CmltcG9ydCAncGFja2FnZTptYXNvbi9tYXNvbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm1vY2t0YWlsL21vY2t0YWlsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6cGF0aC9wYXRoLmRhcnQnIGFzIHBhdGg7CmltcG9ydCAncGFja2FnZTp0ZXN0L3Rlc3QuZGFydCc7CgpjbGFzcyBfTW9ja0xvZ2dlciBleHRlbmRzIE1vY2sgaW1wbGVtZW50cyBMb2dnZXIge30KCmNsYXNzIF9GYWtlSG9va0NvbnRleHQgZXh0ZW5kcyBGYWtlIGltcGxlbWVudHMgSG9va0NvbnRleHQgewogIF9GYWtlSG9va0NvbnRleHQoe0xvZ2dlcj8gbG9nZ2VyfSkgOiBfbG9nZ2VyID0gbG9nZ2VyID8/IF9Nb2NrTG9nZ2VyKCk7CgogIGZpbmFsIExvZ2dlciBfbG9nZ2VyOwoKICB2YXIgX3ZhcnMgPSA8U3RyaW5nLCBkeW5hbWljPnt9OwoKICBAb3ZlcnJpZGUKICBNYXA8U3RyaW5nLCBkeW5hbWljPiBnZXQgdmFycyA9PiBfdmFyczsKCiAgQG92ZXJyaWRlCiAgc2V0IHZhcnMoTWFwPFN0cmluZywgZHluYW1pYz4gdmFsdWUpID0+IF92YXJzID0gdmFsdWU7CgogIEBvdmVycmlkZQogIExvZ2dlciBnZXQgbG9nZ2VyID0+IF9sb2dnZXI7Cn0KCnZvaWQgbWFpbigpIHsKICBncm91cCgncG9zdEdlbicsICgpIHsKICAgIGxhdGUgSG9va0NvbnRleHQgY29udGV4dDsKICAgIGxhdGUgTG9nZ2VyIGxvZ2dlcjsKCiAgICBzZXRVcCgoKSB7CiAgICAgIGxvZ2dlciA9IF9Nb2NrTG9nZ2VyKCk7CiAgICAgIGNvbnRleHQgPSBfRmFrZUhvb2tDb250ZXh0KGxvZ2dlcjogbG9nZ2VyKTsKICAgIH0pOwoKICAgIHRlc3QoJ3Bvc3RHZW4gY29tcGxldGVzJywgKCkgewogICAgICBjb250ZXh0LnZhcnNbJ2Rpcl9wYXRoJ10gPSAncm91dGVzL25ld19yb3V0ZSc7CiAgICAgIGNvbnRleHQudmFyc1snZmlsZW5hbWUnXSA9ICdpbmRleC5kYXJ0JzsKICAgICAgZXhwZWN0KAogICAgICAgIEV4aXRPdmVycmlkZXMucnVuWm9uZWQoCiAgICAgICAgICAoKSBhc3luYyA9PiBwb3N0R2VuKGNvbnRleHQpLAogICAgICAgICAgZXhpdDogKF8pIHt9LAogICAgICAgICksCiAgICAgICAgY29tcGxldGVzLAogICAgICApOwogICAgfSk7CgogICAgdGVzdCgnZXhpdCgxKSBpZiBkaXJfcGF0aCBpcyBub3QgZGVmaW5lZCcsICgpIHsKICAgICAgZmluYWwgZXhpdENhbGxzID0gPGludD5bXTsKICAgICAgcG9zdEdlbihjb250ZXh0LCBleGl0OiBleGl0Q2FsbHMuYWRkKTsKICAgICAgZXhwZWN0KGV4aXRDYWxscywgZXF1YWxzKFsxXSkpOwogICAgfSk7CgogICAgdGVzdCgnbW92ZXMgZmlsZSB0byBzdXBwb3NlZCBkaXJlY3RvcnknLCAoKSB7CiAgICAgIGZpbmFsIGRpcmVjdG9yeSA9IGlvLkRpcmVjdG9yeS5zeXN0ZW1UZW1wLmNyZWF0ZVRlbXBTeW5jKAogICAgICAgICdkYXJ0X2Zyb2dfbmV3X2hvb2tzX3Rlc3QnLAogICAgICApOwogICAgICBhZGRUZWFyRG93bigoKSB7CiAgICAgICAgZGlyZWN0b3J5LmRlbGV0ZVN5bmMocmVjdXJzaXZlOiB0cnVlKTsKICAgICAgfSk7CiAgICAgIGZpbmFsIGZpbGVQYXRoID0gcGF0aC5qb2luKGRpcmVjdG9yeS5wYXRoLCAnaW5kZXguZGFydCcpOwogICAgICBpby5GaWxlKGZpbGVQYXRoKQogICAgICAgIC4uY3JlYXRlU3luYyhyZWN1cnNpdmU6IHRydWUpCiAgICAgICAgLi53cml0ZUFzU3RyaW5nU3luYygnY29udGVudCcpOwoKICAgICAgY29udGV4dC52YXJzWydkaXJfcGF0aCddID0gJ3JvdXRlcy9uZXdfcm91dGUnOwogICAgICBjb250ZXh0LnZhcnNbJ2ZpbGVuYW1lJ10gPSAnaW5kZXguZGFydCc7CgogICAgICBwb3N0R2VuKGNvbnRleHQsIGRpcmVjdG9yeTogZGlyZWN0b3J5KTsKCiAgICAgIGV4cGVjdCgKICAgICAgICBpby5GaWxlKHBhdGguam9pbihkaXJlY3RvcnkucGF0aCwgJ3JvdXRlcy9uZXdfcm91dGUvaW5kZXguZGFydCcpKQogICAgICAgICAgICAucmVhZEFzU3RyaW5nU3luYygpLAogICAgICAgICdjb250ZW50JywKICAgICAgKTsKICAgIH0pOwogIH0pOwp9Cg==",
      "type": "text"
    },
    {
      "path": "test/pre_gen_test.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "test/src/exit_overrides_test.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKCmltcG9ydCAncGFja2FnZTpkYXJ0X2Zyb2dfbmV3X2hvb2tzL3NyYy9leGl0X292ZXJyaWRlcy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnRlc3QvdGVzdC5kYXJ0JzsKCnZvaWQgbWFpbigpIHsKICBncm91cCgnRXhpdE92ZXJyaWRlcycsICgpIHsKICAgIGdyb3VwKCdydW5ab25lZCcsICgpIHsKICAgICAgdGVzdCgndXNlcyBkZWZhdWx0IGV4aXQgd2hlbiBub3Qgc3BlY2lmaWVkJywgKCkgewogICAgICAgIEV4aXRPdmVycmlkZXMucnVuWm9uZWQoKCkgewogICAgICAgICAgZmluYWwgb3ZlcnJpZGVzID0gRXhpdE92ZXJyaWRlcy5jdXJyZW50OwogICAgICAgICAgZXhwZWN0KG92ZXJyaWRlcyEuZXhpdCwgZXF1YWxzKGV4aXQpKTsKICAgICAgICB9KTsKICAgICAgfSk7CgogICAgICB0ZXN0KCd1c2VzIGN1c3RvbSBleGl0IHdoZW4gc3BlY2lmaWVkJywgKCkgewogICAgICAgIEV4aXRPdmVycmlkZXMucnVuWm9uZWQoCiAgICAgICAgICAoKSB7CiAgICAgICAgICAgIGZpbmFsIG92ZXJyaWRlcyA9IEV4aXRPdmVycmlkZXMuY3VycmVudDsKICAgICAgICAgICAgZXhwZWN0KG92ZXJyaWRlcyEuZXhpdCwgaXNOb3QoZXF1YWxzKGV4aXQpKSk7CiAgICAgICAgICB9LAogICAgICAgICAgZXhpdDogKF8pIHt9LAogICAgICAgICk7CiAgICAgIH0pOwogICAgfSk7CiAgfSk7Cn0K",
      "type": "text"
    },
    {
      "path": "test/src/normalize_route_path_test.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmRhcnRfZnJvZ19uZXdfaG9va3Mvc3JjL25vcm1hbGl6ZV9yb3V0ZV9wYXRoLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6dGVzdC90ZXN0LmRhcnQnOwoKdm9pZCBtYWluKCkgewogIGdyb3VwKCdub3JtYWxpemVSb3V0ZVBhdGgnLCAoKSB7CiAgICBmaW5hbCBleHBlY3RlZE1hcHBpbmdzID0gPFN0cmluZywgU3RyaW5nPnsKICAgICAgJy8nOiAnLycsCiAgICAgIHInXCc6ICcvJywKICAgICAgJyc6ICcvJywKICAgICAgJy9oZWxsbyc6ICcvaGVsbG8nLAogICAgICByJ1xoZWxsbyc6ICcvaGVsbG8nLAogICAgICAnaGVsbG8nOiAnL2hlbGxvJywKICAgICAgJ1tpZF0nOiAnLzxpZD4nLAogICAgICAnPGlkPic6ICcvPGlkPicsCiAgICAgICcvaGVsbG8vd29ybGQnOiAnL2hlbGxvL3dvcmxkJywKICAgICAgcidcaGVsbG9cd29ybGQnOiAnL2hlbGxvL3dvcmxkJywKICAgICAgJ2hlbGxvL3dvcmxkJzogJy9oZWxsby93b3JsZCcsCiAgICAgICcvaGVsbG8vW25hbWVdJzogJy9oZWxsby88bmFtZT4nLAogICAgICByJ1xoZWxsb1xbbmFtZV0nOiAnL2hlbGxvLzxuYW1lPicsCiAgICAgICdoZWxsby9bbmFtZV0nOiAnL2hlbGxvLzxuYW1lPicsCiAgICAgICcvaGVsbG8vPG5hbWU+JzogJy9oZWxsby88bmFtZT4nLAogICAgICAnL1tpZF0vaXRlbSc6ICcvPGlkPi9pdGVtJywKICAgICAgcidcW2lkXVxpdGVtJzogJy88aWQ+L2l0ZW0nLAogICAgICAnW2lkXS9pdGVtJzogJy88aWQ+L2l0ZW0nLAogICAgICAnLzxpZD4vaXRlbSc6ICcvPGlkPi9pdGVtJywKICAgICAgJy90aGlzIGhhcyBzcGFjZS9yZWFsbHknOiAnL3RoaXMlMjBoYXMlMjBzcGFjZS9yZWFsbHknLAogICAgICAnL3doby9kb2VzL25vdC8uLi90aGlzLy4nOiAnL3doby9kb2VzL3RoaXMnLAogICAgfTsKCiAgICBmb3IgKGZpbmFsIGVudHJ5IGluIGV4cGVjdGVkTWFwcGluZ3MuZW50cmllcykgewogICAgICB0ZXN0KCdtYXBzICR7ZW50cnkua2V5fSAtPiAke2VudHJ5LnZhbHVlfScsICgpIHsKICAgICAgICBleHBlY3Qobm9ybWFsaXplUm91dGVQYXRoKGVudHJ5LmtleSksIGVxdWFscyhlbnRyeS52YWx1ZSkpOwogICAgICB9KTsKICAgIH0KICB9KTsKfQo=",
      "type": "text"
    },
    {
      "path": "test/src/parameter_syntax_test.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmRhcnRfZnJvZ19uZXdfaG9va3Mvc3JjL3BhcmFtZXRlcl9zeW50YXguZGFydCc7CmltcG9ydCAncGFja2FnZTp0ZXN0L3Rlc3QuZGFydCc7Cgp2b2lkIG1haW4oKSB7CiAgZ3JvdXAoJ1BhcmFtZXRlclN5bnRheCcsICgpIHsKICAgIGdyb3VwKCd0b0RpYW1vbmRQYXJhbWV0ZXJTeW50YXgnLCAoKSB7CiAgICAgIHRlc3QoJ3Nob3VsZCBjb252ZXJ0IGJyYWNrZXRzIHRvIGRpYW1vbmQgYnJhY2tldHMnLCAoKSB7CiAgICAgICAgZXhwZWN0KCcvW2lkXScudG9EaWFtb25kUGFyYW1ldGVyU3ludGF4LCBlcXVhbHMoJy88aWQ+JykpOwogICAgICAgIGV4cGVjdCgnL1tpZF0vaXRlbScudG9EaWFtb25kUGFyYW1ldGVyU3ludGF4LCBlcXVhbHMoJy88aWQ+L2l0ZW0nKSk7CiAgICAgICAgZXhwZWN0KCcvdG9wL1tpZF0nLnRvRGlhbW9uZFBhcmFtZXRlclN5bnRheCwgZXF1YWxzKCcvdG9wLzxpZD4nKSk7CiAgICAgIH0pOwogICAgfSk7CiAgICBncm91cCgndG9CcmFja2V0UGFyYW1ldGVyU3ludGF4JywgKCkgewogICAgICB0ZXN0KCdzaG91bGQgY29udmVydCBkaWFtb25kIGJyYWNrZXRzIHRvIGJyYWNrZXRzJywgKCkgewogICAgICAgIGV4cGVjdCgnLzxpZD4nLnRvQnJhY2tldFBhcmFtZXRlclN5bnRheCwgZXF1YWxzKCcvW2lkXScpKTsKICAgICAgICBleHBlY3QoJy88aWQ+L2l0ZW0nLnRvQnJhY2tldFBhcmFtZXRlclN5bnRheCwgZXF1YWxzKCcvW2lkXS9pdGVtJykpOwogICAgICAgIGV4cGVjdCgnL3RvcC88aWQ+Jy50b0JyYWNrZXRQYXJhbWV0ZXJTeW50YXgsIGVxdWFscygnL3RvcC9baWRdJykpOwogICAgICB9KTsKICAgIH0pOwoKICAgIGdyb3VwKCdoYXNEaWFtb25kUGFyYW1ldGVyJywgKCkgewogICAgICB0ZXN0KAogICAgICAgICdzaG91bGQgcmV0dXJuIHRydWUgaWYgdGhlIHJvdXRlIGNvbnRhaW5zIGRpYW1vbmQgcGFyYW1ldGVycycsCiAgICAgICAgKCkgewogICAgICAgICAgZXhwZWN0KCcvPGlkPicuaGFzRGlhbW9uZFBhcmFtZXRlciwgaXNUcnVlKTsKICAgICAgICAgIGV4cGVjdCgnLzxpZD4vaXRlbScuaGFzRGlhbW9uZFBhcmFtZXRlciwgaXNUcnVlKTsKICAgICAgICAgIGV4cGVjdCgnL3RvcC88aWQ+Jy5oYXNEaWFtb25kUGFyYW1ldGVyLCBpc1RydWUpOwogICAgICAgIH0sCiAgICAgICk7CgogICAgICB0ZXN0KAogICAgICAgICdzaG91bGQgcmV0dXJuIGZhbHNlIGlmIHRoZSByb3V0ZSBkb2VzIG5vdCBjb250YWluIGRpYW1vbmQgcGFyYW1ldGVycycsCiAgICAgICAgKCkgewogICAgICAgICAgZXhwZWN0KCcvaWQnLmhhc0RpYW1vbmRQYXJhbWV0ZXIsIGlzRmFsc2UpOwogICAgICAgICAgZXhwZWN0KCcvaWQvaXRlbScuaGFzRGlhbW9uZFBhcmFtZXRlciwgaXNGYWxzZSk7CiAgICAgICAgICBleHBlY3QoJy88dG9wL2lkJy5oYXNEaWFtb25kUGFyYW1ldGVyLCBpc0ZhbHNlKTsKICAgICAgICAgIGV4cGVjdCgnL3RvcD4vaWQnLmhhc0RpYW1vbmRQYXJhbWV0ZXIsIGlzRmFsc2UpOwogICAgICAgIH0sCiAgICAgICk7CiAgICB9KTsKCiAgICBncm91cCgnZ2V0UGFyYW1ldGVyTmFtZXMnLCAoKSB7CiAgICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gdGhlIHBhcmFtZXRlciBuYW1lcycsICgpIHsKICAgICAgICBleHBlY3QoJy88aWQ+Jy5nZXRQYXJhbWV0ZXJOYW1lcygpLCBlcXVhbHMoWydpZCddKSk7CiAgICAgICAgZXhwZWN0KCcvPGlkPi9pdGVtJy5nZXRQYXJhbWV0ZXJOYW1lcygpLCBlcXVhbHMoWydpZCddKSk7CiAgICAgICAgZXhwZWN0KCcvdG9wLzxpZD4nLmdldFBhcmFtZXRlck5hbWVzKCksIGVxdWFscyhbJ2lkJ10pKTsKICAgICAgICBleHBlY3QoJy88aWQ+L2l0ZW0vPG5hbWU+Jy5nZXRQYXJhbWV0ZXJOYW1lcygpLCBlcXVhbHMoWydpZCcsICduYW1lJ10pKTsKICAgICAgICBleHBlY3QoJy9baWRdJy5nZXRQYXJhbWV0ZXJOYW1lcygpLCBlcXVhbHMoWydpZCddKSk7CiAgICAgICAgZXhwZWN0KCcvW2lkXS9pdGVtJy5nZXRQYXJhbWV0ZXJOYW1lcygpLCBlcXVhbHMoWydpZCddKSk7CiAgICAgICAgZXhwZWN0KCcvdG9wL1tpZF0nLmdldFBhcmFtZXRlck5hbWVzKCksIGVxdWFscyhbJ2lkJ10pKTsKICAgICAgICBleHBlY3QoJy9baWRdL2l0ZW0vW25hbWVdJy5nZXRQYXJhbWV0ZXJOYW1lcygpLCBlcXVhbHMoWydpZCcsICduYW1lJ10pKTsKICAgICAgfSk7CiAgICAgIHRlc3QoJ3Nob3VsZCBmYWlsIG9uIGR1cGxpY2F0ZWQgcGFyYW1ldGVyIG5hbWVzJywgKCkgewogICAgICAgIGV4cGVjdCgKICAgICAgICAgICgpID0+ICcvPGlkPi9zdXBlci88bmljZT4vPGlkPi88bmljZT4nLmdldFBhcmFtZXRlck5hbWVzKCksCiAgICAgICAgICB0aHJvd3NBKAogICAgICAgICAgICBpc0E8Rm9ybWF0RXhjZXB0aW9uPigpLmhhdmluZygKICAgICAgICAgICAgICAocCkgPT4gcC5tZXNzYWdlLAogICAgICAgICAgICAgICdtZXNzYWdlJywKICAgICAgICAgICAgICAnRHVwbGljYXRlIHBhcmFtZXRlciBuYW1lcyBmb3VuZDogaWQsIG5pY2UnLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICApOwogICAgICAgIGV4cGVjdCgKICAgICAgICAgICgpID0+ICcvW2lkXS9baWRdJy5nZXRQYXJhbWV0ZXJOYW1lcygpLAogICAgICAgICAgdGhyb3dzQSgKICAgICAgICAgICAgaXNBPEZvcm1hdEV4Y2VwdGlvbj4oKS5oYXZpbmcoCiAgICAgICAgICAgICAgKHApID0+IHAubWVzc2FnZSwKICAgICAgICAgICAgICAnbWVzc2FnZScsCiAgICAgICAgICAgICAgJ0R1cGxpY2F0ZSBwYXJhbWV0ZXIgbmFtZSBmb3VuZDogaWQnLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICApOwogICAgICB9KTsKICAgIH0pOwogIH0pOwp9Cg==",
      "type": "text"
    },
    {
      "path": "test/src/route_configuration_utils_test.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmRhcnRfZnJvZ19nZW4vZGFydF9mcm9nX2dlbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmRhcnRfZnJvZ19uZXdfaG9va3Mvc3JjL3JvdXRlX2NvbmZpZ3VyYXRpb25fdXRpbHMuZGFydCc7CmltcG9ydCAncGFja2FnZTptYXNvbi9tYXNvbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm1vY2t0YWlsL21vY2t0YWlsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6dGVzdC90ZXN0LmRhcnQnOwoKY2xhc3MgX01vY2tSb3V0ZUNvbmZpZ3VyYXRpb24gZXh0ZW5kcyBNb2NrIGltcGxlbWVudHMgUm91dGVDb25maWd1cmF0aW9uIHt9Cgp2b2lkIG1haW4oKSB7CiAgZ3JvdXAoJ1JvdXRlQ29uZmlndXJhdGlvblV0aWxzJywgKCkgewogICAgZ3JvdXAoJ3ZhbGlkYXRlJywgKCkgewogICAgICBsYXRlIFJvdXRlQ29uZmlndXJhdGlvbiBjb25maWd1cmF0aW9uOwoKICAgICAgc2V0VXAoKCkgewogICAgICAgIGNvbmZpZ3VyYXRpb24gPSBfTW9ja1JvdXRlQ29uZmlndXJhdGlvbigpOwogICAgICAgIHdoZW4oKCkgPT4gY29uZmlndXJhdGlvbi5yb2d1ZVJvdXRlcykudGhlblJldHVybihbXSk7CiAgICAgICAgd2hlbigoKSA9PiBjb25maWd1cmF0aW9uLmVuZHBvaW50cykudGhlblJldHVybih7fSk7CiAgICAgIH0pOwoKICAgICAgdGVzdCgncmVwb3J0cyByb2d1ZSByb3V0ZScsICgpIHsKICAgICAgICB3aGVuKCgpID0+IGNvbmZpZ3VyYXRpb24ucm9ndWVSb3V0ZXMpLnRoZW5SZXR1cm4oCiAgICAgICAgICBjb25zdCBbCiAgICAgICAgICAgIFJvdXRlRmlsZSgKICAgICAgICAgICAgICBuYW1lOiAnaGVsbG8nLAogICAgICAgICAgICAgIHBhdGg6ICdoZWxsby5kYXJ0JywKICAgICAgICAgICAgICByb3V0ZTogJy9oZWxsbycsCiAgICAgICAgICAgICAgcGFyYW1zOiBbXSwKICAgICAgICAgICAgICB3aWxkY2FyZDogZmFsc2UsCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICk7CgogICAgICAgIGV4cGVjdCgKICAgICAgICAgICgpID0+IGNvbmZpZ3VyYXRpb24udmFsaWRhdGUoKSwKICAgICAgICAgIHRocm93c0EoCiAgICAgICAgICAgIGlzQTxGb3JtYXRFeGNlcHRpb24+KCkuaGF2aW5nKAogICAgICAgICAgICAgIChwKSA9PiBwLm1lc3NhZ2UsCiAgICAgICAgICAgICAgJ2Vycm9yIG1lc3NhZ2UnLAogICAgICAgICAgICAgICcnJ1JvZ3VlIHJvdXRlIGRldGVjdGVkLiR7ZGVmYXVsdEZvcmVncm91bmQud3JhcCgnICcpfVJlbmFtZSAke2xpZ2h0Q3lhbi53cmFwKCdyb3V0ZXMvaGVsbG8uZGFydCcpfSB0byAke2xpZ2h0Q3lhbi53cmFwKCdyb3V0ZXMvaGVsbG8vaW5kZXguZGFydCcpfS4nJycsCiAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgICk7CiAgICAgIH0pOwoKICAgICAgdGVzdCgncmVwb3J0IHJvdXRlIGNvbmZsaWN0JywgKCkgewogICAgICAgIHdoZW4oKCkgPT4gY29uZmlndXJhdGlvbi5lbmRwb2ludHMpLnRoZW5SZXR1cm4oewogICAgICAgICAgJy8nOiBjb25zdCBbCiAgICAgICAgICAgIFJvdXRlRmlsZSgKICAgICAgICAgICAgICBuYW1lOiAnaW5kZXgnLAogICAgICAgICAgICAgIHBhdGg6ICdpbmRleC5kYXJ0JywKICAgICAgICAgICAgICByb3V0ZTogJy8nLAogICAgICAgICAgICAgIHBhcmFtczogW10sCiAgICAgICAgICAgICAgd2lsZGNhcmQ6IGZhbHNlLAogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICAgICcvaGVsbG8nOiBjb25zdCBbCiAgICAgICAgICAgIFJvdXRlRmlsZSgKICAgICAgICAgICAgICBuYW1lOiAnaGVsbG8nLAogICAgICAgICAgICAgIHBhdGg6ICdoZWxsby5kYXJ0JywKICAgICAgICAgICAgICByb3V0ZTogJy9oZWxsbycsCiAgICAgICAgICAgICAgcGFyYW1zOiBbXSwKICAgICAgICAgICAgICB3aWxkY2FyZDogZmFsc2UsCiAgICAgICAgICAgICksCiAgICAgICAgICAgIFJvdXRlRmlsZSgKICAgICAgICAgICAgICBuYW1lOiAnaGVsbG9faW5kZXgnLAogICAgICAgICAgICAgIHBhdGg6ICdoZWxsby9pbmRleC5kYXJ0JywKICAgICAgICAgICAgICByb3V0ZTogJy8nLAogICAgICAgICAgICAgIHBhcmFtczogW10sCiAgICAgICAgICAgICAgd2lsZGNhcmQ6IGZhbHNlLAogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICB9KTsKCiAgICAgICAgZXhwZWN0KAogICAgICAgICAgKCkgPT4gY29uZmlndXJhdGlvbi52YWxpZGF0ZSgpLAogICAgICAgICAgdGhyb3dzQSgKICAgICAgICAgICAgaXNBPEZvcm1hdEV4Y2VwdGlvbj4oKS5oYXZpbmcoCiAgICAgICAgICAgICAgKHApID0+IHAubWVzc2FnZSwKICAgICAgICAgICAgICAnZXJyb3IgbWVzc2FnZScsCiAgICAgICAgICAgICAgJycnUm91dGUgY29uZmxpY3QgZGV0ZWN0ZWQuICR7bGlnaHRDeWFuLndyYXAoJ3JvdXRlcy9oZWxsby5kYXJ0Jyl9IGFuZCAke2xpZ2h0Q3lhbi53cmFwKCdyb3V0ZXMvaGVsbG8vaW5kZXguZGFydCcpfSBib3RoIHJlc29sdmUgdG8gJHtsaWdodEN5YW4ud3JhcCgnL2hlbGxvJyl9LicnJywKICAgICAgICAgICAgKSwKICAgICAgICAgICksCiAgICAgICAgKTsKICAgICAgfSk7CiAgICB9KTsKCiAgICBncm91cCgnY29udGFpbmluZ0ZpbGVSb3V0ZScsICgpIHsKICAgICAgbGF0ZSBSb3V0ZUNvbmZpZ3VyYXRpb24gY29uZmlndXJhdGlvbjsKICAgICAgc2V0VXAoKCkgewogICAgICAgIGNvbmZpZ3VyYXRpb24gPSBfTW9ja1JvdXRlQ29uZmlndXJhdGlvbigpOwogICAgICAgIHdoZW4oKCkgPT4gY29uZmlndXJhdGlvbi5lbmRwb2ludHMpLnRoZW5SZXR1cm4oewogICAgICAgICAgJy8nOiBjb25zdCA8Um91dGVGaWxlPlsKICAgICAgICAgICAgUm91dGVGaWxlKAogICAgICAgICAgICAgIG5hbWU6ICdpbmRleCcsCiAgICAgICAgICAgICAgcGF0aDogJy4uL3JvdXRlcy9pbmRleC5kYXJ0JywKICAgICAgICAgICAgICByb3V0ZTogJy8nLAogICAgICAgICAgICAgIHBhcmFtczogW10sCiAgICAgICAgICAgICAgd2lsZGNhcmQ6IGZhbHNlLAogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICAgICcvPGlkPic6IGNvbnN0IDxSb3V0ZUZpbGU+WwogICAgICAgICAgICBSb3V0ZUZpbGUoCiAgICAgICAgICAgICAgbmFtZTogcickaWRfaW5kZXgnLAogICAgICAgICAgICAgIHBhdGg6ICcuLi9yb3V0ZXMvW2lkXS9pbmRleC5kYXJ0JywKICAgICAgICAgICAgICByb3V0ZTogJy8nLAogICAgICAgICAgICAgIHBhcmFtczogW10sCiAgICAgICAgICAgICAgd2lsZGNhcmQ6IGZhbHNlLAogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICAgICcvPGlkPi9leGlzdGluZ19hc19maWxlJzogY29uc3QgPFJvdXRlRmlsZT5bCiAgICAgICAgICAgIFJvdXRlRmlsZSgKICAgICAgICAgICAgICBuYW1lOiByJyRpZF9leGlzdGluZ19hc19maWxlJywKICAgICAgICAgICAgICBwYXRoOiAnLi4vcm91dGVzL1tpZF0vZXhpc3RpbmdfYXNfZmlsZS5kYXJ0JywKICAgICAgICAgICAgICByb3V0ZTogJy9leGlzdGluZ19hc19maWxlJywKICAgICAgICAgICAgICBwYXJhbXM6IFtdLAogICAgICAgICAgICAgIHdpbGRjYXJkOiBmYWxzZSwKICAgICAgICAgICAgKSwKICAgICAgICAgIF0sCiAgICAgICAgICAnLzxpZD4vZXhpc3RpbmdfYXNfZGlyJzogY29uc3QgPFJvdXRlRmlsZT5bCiAgICAgICAgICAgIFJvdXRlRmlsZSgKICAgICAgICAgICAgICBuYW1lOiByJyRpZF9leGlzdGluZ19hc19kaXJfaW5kZXgnLAogICAgICAgICAgICAgIHBhdGg6ICcuLi9yb3V0ZXMvW2lkXS9leGlzdGluZ19hc19kaXIvaW5kZXguZGFydCcsCiAgICAgICAgICAgICAgcm91dGU6ICcvJywKICAgICAgICAgICAgICBwYXJhbXM6IFtdLAogICAgICAgICAgICAgIHdpbGRjYXJkOiBmYWxzZSwKICAgICAgICAgICAgKSwKICAgICAgICAgIF0sCiAgICAgICAgfSk7CiAgICAgIH0pOwoKICAgICAgZ3JvdXAoJ2luY2x1ZGVTZWxmIGZhbHNlJywgKCkgewogICAgICAgIHRlc3QoJ3JldHVybnMgbnVsbCBmb3IgdGhlIHJvb3Qgcm91dGUnLCAoKSB7CiAgICAgICAgICBmaW5hbCByZXN1bHQgPSBjb25maWd1cmF0aW9uLmNvbnRhaW5pbmdGaWxlUm91dGUoJy8nKTsKCiAgICAgICAgICBleHBlY3QocmVzdWx0LCBpc051bGwpOwogICAgICAgIH0pOwoKICAgICAgICB0ZXN0KCdyZXR1cm5zIG51bGwgZm9yIHJvdXRlcyB3aXRoIG5vIGZpbGUgcm91dGUgYXMgYW5jZXN0b3InLCAoKSB7CiAgICAgICAgICBmaW5hbCByZXN1bHQgPSBjb25maWd1cmF0aW9uLmNvbnRhaW5pbmdGaWxlUm91dGUoCiAgICAgICAgICAgICcvPGlkPi9leGlzdGluZ19hc19kaXIvbmV3X3JvdXRlJywKICAgICAgICAgICk7CgogICAgICAgICAgZXhwZWN0KHJlc3VsdCwgaXNOdWxsKTsKICAgICAgICB9KTsKCiAgICAgICAgdGVzdCgncmV0dXJucyB0aGUgaW5uZXJtb3N0IGZpbGUgcm91dGUnLCAoKSB7CiAgICAgICAgICBmaW5hbCByZXN1bHQgPSBjb25maWd1cmF0aW9uLmNvbnRhaW5pbmdGaWxlUm91dGUoCiAgICAgICAgICAgICcvPGlkPi9leGlzdGluZ19hc19maWxlL25ld19yb3V0ZScsCiAgICAgICAgICApOwoKICAgICAgICAgIGV4cGVjdCgKICAgICAgICAgICAgcmVzdWx0LAogICAgICAgICAgICBjb25zdCBSb3V0ZUZpbGUoCiAgICAgICAgICAgICAgbmFtZTogcickaWRfZXhpc3RpbmdfYXNfZmlsZScsCiAgICAgICAgICAgICAgcGF0aDogJy4uL3JvdXRlcy9baWRdL2V4aXN0aW5nX2FzX2ZpbGUuZGFydCcsCiAgICAgICAgICAgICAgcm91dGU6ICcvZXhpc3RpbmdfYXNfZmlsZScsCiAgICAgICAgICAgICAgcGFyYW1zOiBbXSwKICAgICAgICAgICAgICB3aWxkY2FyZDogZmFsc2UsCiAgICAgICAgICAgICksCiAgICAgICAgICApOwogICAgICAgIH0pOwoKICAgICAgICB0ZXN0KCdyZXR1cm5zIG51bGwgd2hlbiB0aGUgZ2l2ZW4gcm91dGUgaXMgYSBmaWxlIHJvdXRlJywgKCkgewogICAgICAgICAgZmluYWwgcmVzdWx0ID0gY29uZmlndXJhdGlvbi5jb250YWluaW5nRmlsZVJvdXRlKAogICAgICAgICAgICAnLzxpZD4vZXhpc3RpbmdfYXNfZGlyJywKICAgICAgICAgICk7CgogICAgICAgICAgZXhwZWN0KHJlc3VsdCwgaXNOdWxsKTsKICAgICAgICB9KTsKICAgICAgfSk7CgogICAgICBncm91cCgnaW5jbHVkZVNlbGYgdHJ1ZScsICgpIHsKICAgICAgICB0ZXN0KCdyZXR1cm5zIG51bGwgZm9yIHRoZSByb290IHJvdXRlJywgKCkgewogICAgICAgICAgZmluYWwgcmVzdWx0ID0gY29uZmlndXJhdGlvbi5jb250YWluaW5nRmlsZVJvdXRlKAogICAgICAgICAgICAnLycsCiAgICAgICAgICAgIGluY2x1ZGVTZWxmOiB0cnVlLAogICAgICAgICAgKTsKCiAgICAgICAgICBleHBlY3QocmVzdWx0LCBpc051bGwpOwogICAgICAgIH0pOwoKICAgICAgICB0ZXN0KCdyZXR1cm5zIG51bGwgZm9yIHJvdXRlcyB3aXRoIG5vIGZpbGUgcm91dGUgYXMgYW5jZXN0b3InLCAoKSB7CiAgICAgICAgICBmaW5hbCByZXN1bHQgPSBjb25maWd1cmF0aW9uLmNvbnRhaW5pbmdGaWxlUm91dGUoCiAgICAgICAgICAgICcvPGlkPi9leGlzdGluZ19hc19kaXIvbmV3X3JvdXRlJywKICAgICAgICAgICAgaW5jbHVkZVNlbGY6IHRydWUsCiAgICAgICAgICApOwoKICAgICAgICAgIGV4cGVjdChyZXN1bHQsIGlzTnVsbCk7CiAgICAgICAgfSk7CgogICAgICAgIHRlc3QoJ3JldHVybnMgdGhlIGlubmVybW9zdCBmaWxlIHJvdXRlJywgKCkgewogICAgICAgICAgZmluYWwgcmVzdWx0ID0gY29uZmlndXJhdGlvbi5jb250YWluaW5nRmlsZVJvdXRlKAogICAgICAgICAgICAnLzxpZD4vZXhpc3RpbmdfYXNfZmlsZS9uZXdfcm91dGUnLAogICAgICAgICAgICBpbmNsdWRlU2VsZjogdHJ1ZSwKICAgICAgICAgICk7CgogICAgICAgICAgZXhwZWN0KAogICAgICAgICAgICByZXN1bHQsCiAgICAgICAgICAgIGNvbnN0IFJvdXRlRmlsZSgKICAgICAgICAgICAgICBuYW1lOiByJyRpZF9leGlzdGluZ19hc19maWxlJywKICAgICAgICAgICAgICBwYXRoOiAnLi4vcm91dGVzL1tpZF0vZXhpc3RpbmdfYXNfZmlsZS5kYXJ0JywKICAgICAgICAgICAgICByb3V0ZTogJy9leGlzdGluZ19hc19maWxlJywKICAgICAgICAgICAgICBwYXJhbXM6IFtdLAogICAgICAgICAgICAgIHdpbGRjYXJkOiBmYWxzZSwKICAgICAgICAgICAgKSwKICAgICAgICAgICk7CiAgICAgICAgfSk7CgogICAgICAgIHRlc3QoJ3JldHVybnMgdGhlIGdpdmVuIHJvdXRlIHdoZW4gdGhhdCBpcyBhIGZpbGUgcm91dGUnLCAoKSB7CiAgICAgICAgICBmaW5hbCByZXN1bHQgPSBjb25maWd1cmF0aW9uLmNvbnRhaW5pbmdGaWxlUm91dGUoCiAgICAgICAgICAgICcvPGlkPi9leGlzdGluZ19hc19maWxlJywKICAgICAgICAgICAgaW5jbHVkZVNlbGY6IHRydWUsCiAgICAgICAgICApOwoKICAgICAgICAgIGV4cGVjdCgKICAgICAgICAgICAgcmVzdWx0LAogICAgICAgICAgICBjb25zdCBSb3V0ZUZpbGUoCiAgICAgICAgICAgICAgbmFtZTogcickaWRfZXhpc3RpbmdfYXNfZmlsZScsCiAgICAgICAgICAgICAgcGF0aDogJy4uL3JvdXRlcy9baWRdL2V4aXN0aW5nX2FzX2ZpbGUuZGFydCcsCiAgICAgICAgICAgICAgcm91dGU6ICcvZXhpc3RpbmdfYXNfZmlsZScsCiAgICAgICAgICAgICAgcGFyYW1zOiBbXSwKICAgICAgICAgICAgICB3aWxkY2FyZDogZmFsc2UsCiAgICAgICAgICAgICksCiAgICAgICAgICApOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pOwogIH0pOwp9Cg==",
      "type": "text"
    },
    {
      "path": "test/src/route_to_path_test.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmRhcnRfZnJvZ19uZXdfaG9va3Mvc3JjL3JvdXRlX3RvX3BhdGguZGFydCc7CmltcG9ydCAncGFja2FnZTpwYXRoL3BhdGguZGFydCcgYXMgcGF0aDsKaW1wb3J0ICdwYWNrYWdlOnRlc3QvdGVzdC5kYXJ0JzsKCnZvaWQgbWFpbigpIHsKICBncm91cCgncm91dGVUb1BhdGgnLCAoKSB7CiAgICB0ZXN0KCdkZWZhdWx0cyB0byBjdXJyZW50IHBsYXRmb3JtIHBhdGggY29udGV4dCcsICgpIHsKICAgICAgZXhwZWN0KHJvdXRlVG9QYXRoKCcvJyksIGVxdWFscyhwYXRoLmpvaW4oJ3JvdXRlcycsICdpbmRleC5kYXJ0JykpKTsKICAgIH0pOwogIH0pOwoKICBncm91cCgncm91dGVUb1BhdGggcG9zaXgnLCAoKSB7CiAgICBncm91cCgncHJlZmVySW5kZXggZmFsc2UnLCAoKSB7CiAgICAgIGZpbmFsIGV4cGVjdGVkUm91dGVUb1BhdGhNYXBwaW5ncyA9IDxTdHJpbmcsIFN0cmluZz57CiAgICAgICAgJy8nOiAnLi4vcm91dGVzL2luZGV4LmRhcnQnLAogICAgICAgICcvaGVsbG8nOiAnLi4vcm91dGVzL2hlbGxvLmRhcnQnLAogICAgICAgICcvaGVsbG8vd29ybGQnOiAnLi4vcm91dGVzL2hlbGxvL3dvcmxkLmRhcnQnLAogICAgICAgICcvaGVsbG8vW25hbWVdJzogJy4uL3JvdXRlcy9oZWxsby9bbmFtZV0uZGFydCcsCiAgICAgICAgJy9baWRdL2l0ZW0nOiAnLi4vcm91dGVzL1tpZF0vaXRlbS5kYXJ0JywKICAgICAgICAnL1tpZF0vcGFydC9pdGVtJzogJy4uL3JvdXRlcy9baWRdL3BhcnQvaXRlbS5kYXJ0JywKICAgICAgfTsKCiAgICAgIGZvciAoZmluYWwgZW50cnkgaW4gZXhwZWN0ZWRSb3V0ZVRvUGF0aE1hcHBpbmdzLmVudHJpZXMpIHsKICAgICAgICB0ZXN0KCdtYXBzICR7ZW50cnkua2V5fSAtPiAke2VudHJ5LnZhbHVlfScsICgpIHsKICAgICAgICAgIGV4cGVjdCgKICAgICAgICAgICAgcm91dGVUb1BhdGgoZW50cnkua2V5LCBwcmVhbWJsZTogJy4uL3JvdXRlcycpLAogICAgICAgICAgICBlcXVhbHMocGF0aC5wb3NpeC5ub3JtYWxpemUoZW50cnkudmFsdWUpKSwKICAgICAgICAgICk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwoKICAgIGdyb3VwKCdwcmVmZXJJbmRleCB0cnVlJywgKCkgewogICAgICBmaW5hbCBleHBlY3RlZFJvdXRlVG9QYXRoTWFwcGluZ3MgPSA8U3RyaW5nLCBTdHJpbmc+ewogICAgICAgICcvJzogJy4uL3JvdXRlcy9pbmRleC5kYXJ0JywKICAgICAgICAnL2hlbGxvJzogJy4uL3JvdXRlcy9oZWxsby9pbmRleC5kYXJ0JywKICAgICAgICAnL2hlbGxvL3dvcmxkJzogJy4uL3JvdXRlcy9oZWxsby93b3JsZC9pbmRleC5kYXJ0JywKICAgICAgICAnL2hlbGxvL1tuYW1lXSc6ICcuLi9yb3V0ZXMvaGVsbG8vW25hbWVdL2luZGV4LmRhcnQnLAogICAgICAgICcvW2lkXS9pdGVtJzogJy4uL3JvdXRlcy9baWRdL2l0ZW0vaW5kZXguZGFydCcsCiAgICAgICAgJy9baWRdL3BhcnQvaXRlbSc6ICcuLi9yb3V0ZXMvW2lkXS9wYXJ0L2l0ZW0vaW5kZXguZGFydCcsCiAgICAgIH07CgogICAgICBmb3IgKGZpbmFsIGVudHJ5IGluIGV4cGVjdGVkUm91dGVUb1BhdGhNYXBwaW5ncy5lbnRyaWVzKSB7CiAgICAgICAgdGVzdCgnbWFwcyAke2VudHJ5LmtleX0gLT4gJHtlbnRyeS52YWx1ZX0nLCAoKSB7CiAgICAgICAgICBleHBlY3QoCiAgICAgICAgICAgIHJvdXRlVG9QYXRoKGVudHJ5LmtleSwgcHJlZmVySW5kZXg6IHRydWUsIHByZWFtYmxlOiAnLi4vcm91dGVzJyksCiAgICAgICAgICAgIGVxdWFscyhwYXRoLnBvc2l4Lm5vcm1hbGl6ZShlbnRyeS52YWx1ZSkpLAogICAgICAgICAgKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgfSk7CgogIGdyb3VwKCdyb3V0ZVRvUGF0aCB3aW5kb3dzJywgKCkgewogICAgZ3JvdXAoJ3ByZWZlckluZGV4IGZhbHNlJywgKCkgewogICAgICBmaW5hbCBleHBlY3RlZFJvdXRlVG9QYXRoTWFwcGluZ3MgPSA8U3RyaW5nLCBTdHJpbmc+ewogICAgICAgICcvJzogcicuLlxyb3V0ZXNcaW5kZXguZGFydCcsCiAgICAgICAgJy9oZWxsbyc6IHInLi5ccm91dGVzXGhlbGxvLmRhcnQnLAogICAgICAgICcvaGVsbG8vd29ybGQnOiByJy4uXHJvdXRlc1xoZWxsb1x3b3JsZC5kYXJ0JywKICAgICAgICAnL2hlbGxvL1tuYW1lXSc6IHInLi5ccm91dGVzXGhlbGxvXFtuYW1lXS5kYXJ0JywKICAgICAgICAnL1tpZF0vaXRlbSc6IHInLi5ccm91dGVzXFtpZF1caXRlbS5kYXJ0JywKICAgICAgICAnL1tpZF0vcGFydC9pdGVtJzogcicuLlxyb3V0ZXNcW2lkXVxwYXJ0XGl0ZW0uZGFydCcsCiAgICAgIH07CgogICAgICBmb3IgKGZpbmFsIGVudHJ5IGluIGV4cGVjdGVkUm91dGVUb1BhdGhNYXBwaW5ncy5lbnRyaWVzKSB7CiAgICAgICAgdGVzdCgnbWFwcyAke2VudHJ5LmtleX0gLT4gJHtlbnRyeS52YWx1ZX0nLCAoKSB7CiAgICAgICAgICBleHBlY3QoCiAgICAgICAgICAgIHJvdXRlVG9QYXRoKAogICAgICAgICAgICAgIGVudHJ5LmtleSwKICAgICAgICAgICAgICBwcmVhbWJsZTogcicuLlxyb3V0ZXMnLAogICAgICAgICAgICAgIHBhdGhDb250ZXh0OiBwYXRoLndpbmRvd3MsCiAgICAgICAgICAgICksCiAgICAgICAgICAgIGVxdWFscyhwYXRoLndpbmRvd3Mubm9ybWFsaXplKGVudHJ5LnZhbHVlKSksCiAgICAgICAgICApOwogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKCiAgICBncm91cCgncHJlZmVySW5kZXggdHJ1ZScsICgpIHsKICAgICAgZmluYWwgZXhwZWN0ZWRSb3V0ZVRvUGF0aE1hcHBpbmdzID0gPFN0cmluZywgU3RyaW5nPnsKICAgICAgICAnLyc6IHInLi5ccm91dGVzXGluZGV4LmRhcnQnLAogICAgICAgICcvaGVsbG8nOiByJy4uXHJvdXRlc1xoZWxsb1xpbmRleC5kYXJ0JywKICAgICAgICAnL2hlbGxvL3dvcmxkJzogcicuLlxyb3V0ZXNcaGVsbG9cd29ybGRcaW5kZXguZGFydCcsCiAgICAgICAgJy9oZWxsby9bbmFtZV0nOiByJy4uXHJvdXRlc1xoZWxsb1xbbmFtZV1caW5kZXguZGFydCcsCiAgICAgICAgJy9baWRdL2l0ZW0nOiByJy4uXHJvdXRlc1xbaWRdXGl0ZW1caW5kZXguZGFydCcsCiAgICAgICAgJy9baWRdL3BhcnQvaXRlbSc6IHInLi5ccm91dGVzXFtpZF1ccGFydFxpdGVtXGluZGV4LmRhcnQnLAogICAgICB9OwoKICAgICAgZm9yIChmaW5hbCBlbnRyeSBpbiBleHBlY3RlZFJvdXRlVG9QYXRoTWFwcGluZ3MuZW50cmllcykgewogICAgICAgIHRlc3QoJ21hcHMgJHtlbnRyeS5rZXl9IC0+ICR7ZW50cnkudmFsdWV9JywgKCkgewogICAgICAgICAgZXhwZWN0KAogICAgICAgICAgICByb3V0ZVRvUGF0aCgKICAgICAgICAgICAgICBlbnRyeS5rZXksCiAgICAgICAgICAgICAgcHJlZmVySW5kZXg6IHRydWUsCiAgICAgICAgICAgICAgcHJlYW1ibGU6IHInLi5ccm91dGVzJywKICAgICAgICAgICAgICBwYXRoQ29udGV4dDogcGF0aC53aW5kb3dzLAogICAgICAgICAgICApLAogICAgICAgICAgICBlcXVhbHMocGF0aC53aW5kb3dzLm5vcm1hbGl6ZShlbnRyeS52YWx1ZSkpLAogICAgICAgICAgKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgfSk7Cn0K",
      "type": "text"
    }
  ],
  "name": "dart_frog_new",
  "description": "A dart frog brick to create routes and middleware",
  "version": "0.1.0+1",
  "environment": {"mason": ">=0.1.0-dev <0.1.0"},
  "readme": {
    "path": "README.md",
    "data":
        "IyBkYXJ0X2Zyb2dfbmV3CgpbIVtQb3dlcmVkIGJ5IE1hc29uXShodHRwczovL2ltZy5zaGllbGRzLmlvL2VuZHBvaW50P3VybD1odHRwcyUzQSUyRiUyRnRpbnl1cmwuY29tJTJGbWFzb24tYmFkZ2UpXShodHRwczovL2dpdGh1Yi5jb20vZmVsYW5nZWwvbWFzb24pCgpBIGRhcnQgZnJvZyBicmljayB0byBjcmVhdGUgcm91dGVzIGFuZCBtaWRkbGV3YXJlLgoKX0dlbmVyYXRlZCBieSBbbWFzb25dWzFdIPCfp7FfCgpbMV06IGh0dHBzOi8vZ2l0aHViLmNvbS9mZWxhbmdlbC9tYXNvbgo=",
    "type": "text"
  },
  "license": {
    "path": "LICENSE",
    "data":
        "TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgMjAyMyBWZXJ5IEdvb2QgVmVudHVyZXMKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsCmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUKU09GVFdBUkUuCg==",
    "type": "text"
  },
  "vars": {
    "route_path": {
      "type": "string",
      "description": "The path for the desired route",
      "prompt": "What is the path for the desired route?"
    },
    "type": {
      "type": "enum",
      "description": "Whether to create a route or a middleware",
      "default": "route",
      "prompt": "Want to create a route or a middleware?",
      "values": ["route", "middleware"]
    }
  }
});
