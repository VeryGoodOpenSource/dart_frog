"use strict";(self.webpackChunkdart_frog_docs=self.webpackChunkdart_frog_docs||[]).push([[583],{9498:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"tutorials/web_socket_counter","title":"\ud83d\udd0c WebSocket Counter","description":"Build a real time \\"Counter\\" powered by WebSockets.","source":"@site/docs/tutorials/web_socket_counter.md","sourceDirName":"tutorials","slug":"/tutorials/web_socket_counter","permalink":"/docs/tutorials/web_socket_counter","draft":false,"unlisted":false,"editUrl":"https://github.com/VeryGoodOpenSource/dart_frog/tree/main/docs/docs/tutorials/web_socket_counter.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"\ud83d\udd0c WebSocket Counter","description":"Build a real time \\"Counter\\" powered by WebSockets."},"sidebar":"docs","previous":{"title":"\ud83d\uddd2 Todos","permalink":"/docs/tutorials/todos"},"next":{"title":"\ud83e\udeaa  Authentication with JWT","permalink":"/docs/tutorials/jwt_authentication"}}');var o=t(4848),c=t(8453);const s={sidebar_position:5,title:"\ud83d\udd0c WebSocket Counter",description:'Build a real time "Counter" powered by WebSockets.'},a="WebSocket Counter \ud83d\udd0c",i={},d=[{value:"Overview",id:"overview",level:2},{value:"Creating a new app",id:"creating-a-new-app",level:2},{value:"Running the development server",id:"running-the-development-server",level:2},{value:"Creating the WebSocket Route",id:"creating-the-websocket-route",level:2},{value:"Adding a WebSocket Handler",id:"adding-a-websocket-handler",level:2},{value:"Establishing a WebSocket Connection",id:"establishing-a-websocket-connection",level:2},{value:"Managing the Counter State",id:"managing-the-counter-state",level:2},{value:"Providing the Counter",id:"providing-the-counter",level:2},{value:"Using the Counter",id:"using-the-counter",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"websocket-counter-",children:"WebSocket Counter \ud83d\udd0c"})}),"\n",(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Difficulty"}),": \ud83d\udfe0 Intermediate",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.strong,{children:"Length"}),": 30 minutes"]}),(0,o.jsxs)(n.p,{children:["Before getting started, ",(0,o.jsx)(n.a,{href:"/docs/overview#prerequisites",children:"read the Dart Frog prerequisites"})," to make sure your development environment is ready."]})]}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"In this tutorial, we're going to build an app that exposes a single endpoint which handles WebSocket connections and maintains a real-time counter which can be incremented and decremented by connected clients."}),"\n",(0,o.jsxs)(n.p,{children:["When we're done, we should be able to connect to the ",(0,o.jsx)(n.code,{children:"/ws"})," endpoint and send or receive messages."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"import 'package:web_socket_channel/web_socket_channel.dart';\n\nvoid main() async {\n  final channel = WebSocketChannel.connect(Uri.parse('ws://localhost:8080/ws'));\n  channel.stream.listen(print);\n\n  channel.sink.add('__increment__');\n  channel.sink.add('__decrement__');\n\n  channel.sink.close();\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"We should see the following output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"0 # initial\n1 # increment\n0 # decrement\n"})}),"\n",(0,o.jsx)(n.h2,{id:"creating-a-new-app",children:"Creating a new app"}),"\n",(0,o.jsx)(n.p,{children:"To create a new Dart Frog app, open your terminal, change to the directory where you'd like to create the app, and run the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"dart_frog create web_socket_counter\n"})}),"\n",(0,o.jsx)(n.p,{children:"You should see an output similar to:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\u2713 Creating web_socket_counter (0.1s)\n\u2713 Installing dependencies (1.7s)\n\nCreated web_socket_counter at ./web_socket_counter.\n\nGet started by typing:\n\ncd ./web_socket_counter\ndart_frog dev\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["Install and use the ",(0,o.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=VeryGoodVentures.dart-frog",children:"Dart Frog VS Code extension"})," to easily create Dart Frog apps within your IDE."]})}),"\n",(0,o.jsx)(n.h2,{id:"running-the-development-server",children:"Running the development server"}),"\n",(0,o.jsxs)(n.p,{children:["You should now have a directory called ",(0,o.jsx)(n.code,{children:"web_socket_counter"}),". Let's change directories into the newly created project:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd web_socket_counter\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then, run the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"dart_frog dev\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This will start the development server on port ",(0,o.jsx)(n.code,{children:"8080"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\u2713 Running on http://localhost:8080 (1.3s)\nThe Dart VM service is listening on http://127.0.0.1:8181/YKEF_nbwOpM=/\nThe Dart DevTools debugger and profiler is available at: http://127.0.0.1:8181/YKEF_nbwOpM=/devtools/#/?uri=ws%3A%2F%2F127.0.0.1%3A8181%2FYKEF_nbwOpM%3D%2Fws\n[hotreload] Hot reload is enabled.\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Make sure it's working by opening ",(0,o.jsx)(n.a,{href:"http://localhost:8080",children:"http://localhost:8080"})," in your browser or via ",(0,o.jsx)(n.code,{children:"cURL"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"curl --request GET \\\n  --url http://localhost:8080\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If everything succeeded, you should see ",(0,o.jsx)(n.code,{children:"Welcome to Dart Frog!"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"creating-the-websocket-route",children:"Creating the WebSocket Route"}),"\n",(0,o.jsxs)(n.p,{children:["Now that we have a running application, let's start by creating a new ",(0,o.jsx)(n.code,{children:"ws"})," route at ",(0,o.jsx)(n.code,{children:"routes/ws.dart"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response(body: 'You have requested /ws');\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["We can also delete the root endpoint at ",(0,o.jsx)(n.code,{children:"routes/index.dart"})," since we won't be needing it for this example."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["Install and use the ",(0,o.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=VeryGoodVentures.dart-frog",children:"Dart Frog VS Code extension"})," to easily create new routes within your IDE."]})}),"\n",(0,o.jsx)(n.p,{children:"Save the changes and hot reload should kick in \u26a1\ufe0f"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[hotreload] - Application reloaded.\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now if we visit ",(0,o.jsx)(n.a,{href:"http://localhost:8080/ws",children:"http://localhost:8080/ws"})," in the browser or via ",(0,o.jsx)(n.code,{children:"cURL"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"curl --request GET \\\n  --url http://localhost:8080/ws\n"})}),"\n",(0,o.jsx)(n.p,{children:"We should see our new response:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"You have requested /ws\n"})}),"\n",(0,o.jsx)(n.h2,{id:"adding-a-websocket-handler",children:"Adding a WebSocket Handler"}),"\n",(0,o.jsxs)(n.p,{children:["Next, we need to upgrade our route handler to handle WebSocket connections. To do this we'll use the ",(0,o.jsx)(n.a,{href:"https://pub.dev/packages/dart_frog_web_socket",children:"dart_frog_web_socket"})," package."]}),"\n",(0,o.jsxs)(n.p,{children:["Add the ",(0,o.jsx)(n.code,{children:"dart_frog_web_socket"})," dependency:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"dart pub add dart_frog_web_socket\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now, let's update our route handler at ",(0,o.jsx)(n.code,{children:"routes/ws.dart"})," to use the provided ",(0,o.jsx)(n.code,{children:"webSocketHandler"})," from ",(0,o.jsx)(n.code,{children:"dart_frog_web_socket"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\nimport 'package:dart_frog_web_socket/dart_frog_web_socket.dart';\n\nFuture<Response> onRequest(RequestContext context) async {\n  final handler = webSocketHandler(\n    (channel, protocol) {\n      // A new client has connected to our server.\n      print('connected');\n\n      // Send a message to the client.\n      channel.sink.add('hello from the server');\n\n      // Listen for messages from the client.\n      channel.stream.listen(\n        print,\n        // The client has disconnected.\n        onDone: () => print('disconnected'),\n      );\n    },\n  );\n\n  return handler(context);\n}\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["For more information, refer to the ",(0,o.jsx)(n.a,{href:"/docs/advanced/web_socket",children:"WebSocket documentation"}),"."]})}),"\n",(0,o.jsx)(n.p,{children:"Save the changes and hot reload should kick in \u26a1\ufe0f"}),"\n",(0,o.jsx)(n.p,{children:"Now we should be able to write a simple script to test the WebSocket connection."}),"\n",(0,o.jsx)(n.h2,{id:"establishing-a-websocket-connection",children:"Establishing a WebSocket Connection"}),"\n",(0,o.jsxs)(n.p,{children:["Create a new directory called ",(0,o.jsx)(n.code,{children:"example"})," at the project root and create a ",(0,o.jsx)(n.code,{children:"pubspec.yaml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"name: example\npublish_to: none\n\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n\ndependencies:\n  web_socket_channel: ^2.4.0\n"})}),"\n",(0,o.jsx)(n.p,{children:"Next, install the dependencies:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"dart pub get\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now, create a ",(0,o.jsx)(n.code,{children:"main.dart"})," with the following contents:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"import 'package:web_socket_channel/web_socket_channel.dart';\n\nvoid main() {\n  // Connect to the remote WebSocket endpoint.\n  final uri = Uri.parse('ws://localhost:8080/ws');\n  final channel = WebSocketChannel.connect(uri);\n\n  // Listen to messages from the server.\n  channel.stream.listen(print);\n\n  // Send a message to the server.\n  channel.sink.add('hello from the client');\n\n  // Close the connection.\n  channel.sink.close();\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["We're using ",(0,o.jsx)(n.a,{href:"https://pub.dev/packages/web_socket_channel",children:(0,o.jsx)(n.code,{children:"package:web_socket_channel"})})," to connect to our Dart Frog ",(0,o.jsx)(n.code,{children:"/ws"})," endpoint. We can send messages to the server by calling ",(0,o.jsx)(n.code,{children:"add"})," on the ",(0,o.jsx)(n.code,{children:"WebSocketChannel"})," sink. We can listen to incoming messages by subscribing to the ",(0,o.jsx)(n.code,{children:"WebSocketChannel"})," stream."]}),"\n",(0,o.jsx)(n.p,{children:"With the Dart Frog server still running, open a separate terminal, and run the example script:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"dart example/main.dart\n"})}),"\n",(0,o.jsx)(n.p,{children:"We should see the following output on the client:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"hello from the server\n"})}),"\n",(0,o.jsx)(n.p,{children:"On the server we should see the following output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"connected\nhello from the client\ndisconnected\n"})}),"\n",(0,o.jsx)(n.p,{children:"Awesome! We've configured a WebSocket handler and established a connection to our server \ud83c\udf89"}),"\n",(0,o.jsx)(n.h2,{id:"managing-the-counter-state",children:"Managing the Counter State"}),"\n",(0,o.jsx)(n.p,{children:"Now that we've configured the WebSocket handler, we're going to shift gears and work on creating a component that will manage the state of the counter."}),"\n",(0,o.jsxs)(n.p,{children:["In this example, we're going to use a cubit from the ",(0,o.jsx)(n.a,{href:"https://bloclibrary.dev",children:"Bloc Library"})," to manage the state of our counter because it provides a reactive API which allows us to stream state changes and query the current state at any given point in time. We're going to use ",(0,o.jsxs)(n.a,{href:"https://pub.dev/packages/broadcast_bloc",children:["package",":broadcast_bloc"]})," which allows blocs or cubits to broadcast their state changes to any subscribed stream channels \u2014 this will come in handy later on."]}),"\n",(0,o.jsxs)(n.p,{children:["Let's add the ",(0,o.jsx)(n.code,{children:"broadcast_bloc"})," dependency:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"dart pub add broadcast_bloc\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then, create a cubit in ",(0,o.jsx)(n.code,{children:"lib/counter/cubit/counter_cubit.dart"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"import 'package:broadcast_bloc/broadcast_bloc.dart';\n\nclass CounterCubit extends BroadcastCubit<int> {\n  // Create an instance with an initial state of 0.\n  CounterCubit() : super(0);\n\n  // Increment the current state.\n  void increment() => emit(state + 1);\n\n  // Decrement the current state.\n  void decrement() => emit(state - 1);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In order to access the cubit from our route handler, we'll create a ",(0,o.jsx)(n.code,{children:"provider"})," in ",(0,o.jsx)(n.code,{children:"lib/counter/middleware/counter_provider.dart"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\nimport 'package:web_socket_counter/counter/counter.dart';\n\nfinal _counter = CounterCubit();\n\n// Provide the counter instance via `RequestContext`.\nfinal counterProvider = provider<CounterCubit>((_) => _counter);\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["For more information, refer to the ",(0,o.jsx)(n.a,{href:"/docs/basics/dependency-injection",children:"dependency injection documentation"}),"."]})}),"\n",(0,o.jsxs)(n.p,{children:["Let's also create a barrel file which exports all ",(0,o.jsx)(n.code,{children:"counter"})," components in ",(0,o.jsx)(n.code,{children:"lib/counter/counter.dart"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"export 'cubit/counter_cubit.dart';\nexport 'middleware/counter_provider.dart';\n"})}),"\n",(0,o.jsx)(n.h2,{id:"providing-the-counter",children:"Providing the Counter"}),"\n",(0,o.jsxs)(n.p,{children:["We need to use the ",(0,o.jsx)(n.code,{children:"counterProvider"})," in order to have access to it in nested. Create a global piece of middleware (",(0,o.jsx)(n.code,{children:"routes/_middleware.dart"}),"):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\nimport 'package:web_socket_counter/counter/counter.dart';\n\nHandler middleware(Handler handler) => handler.use(counterProvider);\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["For more information, refer to the ",(0,o.jsx)(n.a,{href:"/docs/basics/middleware",children:"middleware documentation"}),"."]})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["Install and use the ",(0,o.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=VeryGoodVentures.dart-frog",children:"Dart Frog VS Code extension"})," to easily create new middleware within your IDE."]})}),"\n",(0,o.jsx)(n.h2,{id:"using-the-counter",children:"Using the Counter"}),"\n",(0,o.jsxs)(n.p,{children:["We can access the ",(0,o.jsx)(n.code,{children:"CounterCubit"})," instance from our WebSocket handler via ",(0,o.jsx)(n.code,{children:"context.read<CounterCubit>()"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\nimport 'package:dart_frog_web_socket/dart_frog_web_socket.dart';\nimport 'package:web_socket_counter/counter/counter.dart';\n\nFuture<Response> onRequest(RequestContext context) async {\n  final handler = webSocketHandler(\n    (channel, protocol) {\n      // A new client has connected to our server.\n      // Subscribe the new client to receive notifications\n      // whenever the cubit state changes.\n      final cubit = context.read<CounterCubit>()..subscribe(channel);\n\n      // Send the current count to the new client.\n      channel.sink.add('${cubit.state}');\n\n      // Listen for messages from the client.\n      channel.stream.listen(\n        (event) {\n          switch (event) {\n            // Handle an increment message.\n            case '__increment__':\n              cubit.increment();\n              break;\n            // Handle a decrement message.\n            case '__decrement__':\n              cubit.decrement();\n              break;\n            // Ignore any other messages.\n            default:\n              break;\n          }\n        },\n        // The client has disconnected.\n        // Unsubscribe the channel.\n        onDone: () => cubit.unsubscribe(channel),\n      );\n    },\n  );\n\n  return handler(context);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["First, we subscribe the newly connected client to the ",(0,o.jsx)(n.code,{children:"CounterCubit"})," in order to receive updates whenever the cubit state changes."]}),"\n",(0,o.jsxs)(n.p,{children:["Next, we send the current count to the new client via ",(0,o.jsx)(n.code,{children:"cubit.state"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["When the client sends a new message, we invoke the ",(0,o.jsx)(n.code,{children:"increment"}),"/",(0,o.jsx)(n.code,{children:"decrement"})," method on the cubit based on the message."]}),"\n",(0,o.jsx)(n.p,{children:"Finally, we unsubscribe the channel when the client disconnects."}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"subscribe"})," and ",(0,o.jsx)(n.code,{children:"unsubscribe"})," APIs are exposed by the ",(0,o.jsx)(n.code,{children:"BroadcastCubit"})," super class from ",(0,o.jsx)(n.code,{children:"package:broadcast_bloc"}),"."]})}),"\n",(0,o.jsx)(n.p,{children:"Be sure to save all the changes and hot reload should kick in \u26a1\ufe0f"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[hotreload] - Application reloaded.\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now we can update our example script in ",(0,o.jsx)(n.code,{children:"example/main.dart"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"import 'package:web_socket_channel/web_socket_channel.dart';\n\nvoid main() async {\n  final channel = WebSocketChannel.connect(Uri.parse('ws://localhost:8080/ws'));\n  channel.stream.listen(print);\n\n  channel.sink.add('__increment__');\n  channel.sink.add('__decrement__');\n\n  channel.sink.close();\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Finally, let's run the script:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"dart example/main.dart\n"})}),"\n",(0,o.jsx)(n.p,{children:"We should see the following output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"0\n1\n0\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"If you restart the server, the count will always be reset to 0 because it is only maintained in memory."})}),"\n",(0,o.jsxs)(n.p,{children:["\ud83c\udf89 Congrats, you've created a real-time counter application using Dart Frog. View the ",(0,o.jsx)(n.a,{href:"https://github.com/VeryGoodOpenSource/dart_frog/tree/main/examples/web_socket_counter",children:"full source code"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const o={},c=r.createContext(o);function s(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);