"use strict";(self.webpackChunkdart_frog_docs=self.webpackChunkdart_frog_docs||[]).push([[127],{3021:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"basics/testing","title":"\ud83e\uddea Testing","description":"In Dart Frog, we can effectively unit test our route handlers and middleware using packagemocktail.","source":"@site/docs/basics/testing.md","sourceDirName":"basics","slug":"/basics/testing","permalink":"/docs/basics/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/VeryGoodOpenSource/dart_frog/tree/main/docs/docs/basics/testing.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"\ud83e\uddea Testing"},"sidebar":"docs","previous":{"title":"\ud83d\udc89 Dependency Injection","permalink":"/docs/basics/dependency-injection"},"next":{"title":"\ud83d\udcc1 Serving Static Files","permalink":"/docs/basics/serving-static-files"}}');var r=n(4848),a=n(8453);const o={sidebar_position:5,title:"\ud83e\uddea Testing"},i="Testing \ud83e\uddea",d={},c=[{value:"Route Handlers \ud83d\ude8f",id:"route-handlers-",level:2},{value:"Basics",id:"basics",level:3},{value:"Stubbing <code>context.read&lt;T&gt;</code>",id:"stubbing-contextreadt",level:3},{value:"Middleware \ud83c\udf54",id:"middleware-",level:2},{value:"Basics",id:"basics-1",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"testing-",children:"Testing \ud83e\uddea"})}),"\n",(0,r.jsxs)(t.p,{children:["In Dart Frog, we can effectively unit test our route handlers and middleware using ",(0,r.jsx)(t.a,{href:"https://pub.dev/packages/test",children:(0,r.jsx)(t.code,{children:"package:test"})})," and ",(0,r.jsx)(t.a,{href:"https://pub.dev/packages/mocktail",children:(0,r.jsx)(t.code,{children:"package:mocktail"})}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"route-handlers-",children:"Route Handlers \ud83d\ude8f"}),"\n",(0,r.jsx)(t.p,{children:"Testing route handlers is pretty straightforward and doesn't require any new concepts because a route handler is just a plain Dart function."}),"\n",(0,r.jsx)(t.h3,{id:"basics",children:"Basics"}),"\n",(0,r.jsx)(t.p,{children:"Let's take a look at how we can test the following route handler:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response(body: 'Hello World');\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In the above handler, we're simply returning a ",(0,r.jsx)(t.code,{children:"200"})," response with ",(0,r.jsx)(t.code,{children:"'Hello World'"})," in the response body."]}),"\n",(0,r.jsxs)(t.p,{children:["To test this, we can import our route handler, create a mock ",(0,r.jsx)(t.code,{children:"RequestContext"})," using ",(0,r.jsx)(t.code,{children:"package:mocktail"}),", and invoke ",(0,r.jsx)(t.code,{children:"onRequest"})," with the mock request context to get a ",(0,r.jsx)(t.code,{children:"Response"}),". Then, we can assert that the response is what we expect. In this case, we're checking the ",(0,r.jsx)(t.code,{children:"statusCode"})," and response ",(0,r.jsx)(t.code,{children:"body"})," to ensure that the response is a ",(0,r.jsx)(t.code,{children:"200"})," and the body equals ",(0,r.jsx)(t.code,{children:"'Hello World'"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:"import 'dart:io';\n\nimport 'package:dart_frog/dart_frog.dart';\nimport 'package:mocktail/mocktail.dart';\nimport 'package:test/test.dart';\n\nimport '../../routes/index.dart' as route;\n\nclass _MockRequestContext extends Mock implements RequestContext {}\n\nvoid main() {\n  group('GET /', () {\n    test('responds with a 200 and greeting.', () async {\n      // Arrange\n      final context = _MockRequestContext();\n\n      // Act\n      final response = route.onRequest(context);\n\n      // Assert\n      expect(response.statusCode, equals(HttpStatus.ok));\n      expect(response.body(), completion(equals('Hello World')));\n    });\n  });\n}\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"stubbing-contextreadt",children:["Stubbing ",(0,r.jsx)(t.code,{children:"context.read<T>"})]}),"\n",(0,r.jsxs)(t.p,{children:["Often times, your route handler won't be as simple. For example, it may resolve dependencies via the ",(0,r.jsx)(t.code,{children:"RequestContext"})," like:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  final greeting = context.read<String>();\n  return Response(body: greeting);\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The steps to test the above route handler are the same as before. The only thing we need to add is a stub for ",(0,r.jsx)(t.code,{children:"context.read"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:"import 'dart:io';\n\nimport 'package:dart_frog/dart_frog.dart';\nimport 'package:mocktail/mocktail.dart';\nimport 'package:test/test.dart';\n\nimport '../../routes/index.dart' as route;\n\nclass _MockRequestContext extends Mock implements RequestContext {}\n\nvoid main() {\n  group('GET /', () {\n    test('responds with a 200 and greeting.', () async {\n      // Arrange\n      final greeting = 'Hello!';\n      final context = _MockRequestContext();\n      when(() => context.read<String>()).thenReturn(greeting);\n\n      // Act\n      final response = route.onRequest(context);\n\n      // Assert\n      expect(response.statusCode, equals(HttpStatus.ok));\n      expect(response.body(), completion(equals(greeting)));\n    });\n  });\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"middleware-",children:"Middleware \ud83c\udf54"}),"\n",(0,r.jsx)(t.p,{children:"Unit testing middleware is very similar to unit testing route handlers \u2014 they are both just dart functions after all!"}),"\n",(0,r.jsx)(t.h3,{id:"basics-1",children:"Basics"}),"\n",(0,r.jsxs)(t.p,{children:["Let's take a look at a piece of middleware that provides a greeting to the ",(0,r.jsx)(t.code,{children:"RequestContext"})," via the ",(0,r.jsx)(t.code,{children:"provider"})," API:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nHandler middleware(Handler handler) {\n  return handler.use(provider<String>((_) => 'Hello World'));\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["We can unit test this piece of middleware in isolation using ",(0,r.jsx)(t.code,{children:"package:test"})," and ",(0,r.jsx)(t.code,{children:"package:mocktail"})," just like before."]}),"\n",(0,r.jsxs)(t.p,{children:["To test this, we need to import our middleware, create a mock ",(0,r.jsx)(t.code,{children:"RequestContext"})," using ",(0,r.jsx)(t.code,{children:"package:mocktail"}),", apply our middleware to a dummy handler, and invoke the handler with a mock request context. Then, we can assert that the simple handler we applied the middleware to had access to the provided value."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\nimport 'package:mocktail/mocktail.dart';\nimport 'package:test/test.dart';\n\nimport '../../routes/_middleware.dart';\n\nclass _MockRequestContext extends Mock implements RequestContext {}\n\nvoid main() {\n  group('middleware', () {\n    test('provides greeting', () async {\n      // Arrange\n      String? greeting;\n      final handler = middleware(\n        (context) {\n          greeting = context.read<String>();\n          return Response(body: '');\n        },\n      );\n      final request = Request.get(Uri.parse('http://localhost/'));\n      final context = _MockRequestContext();\n      when(() => context.request).thenReturn(request);\n\n      // Act\n      await handler(context);\n\n      // Assert\n      expect(greeting, equals('Hello World'));\n    });\n  });\n}\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["We are stubbing the ",(0,r.jsx)(t.code,{children:"context.request"})," with a real ",(0,r.jsx)(t.code,{children:"Request"})," object so that the ",(0,r.jsx)(t.code,{children:"provider"})," is able to inject the value."]})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(6540);const r={},a=s.createContext(r);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);