"use strict";(self.webpackChunkdart_frog_docs=self.webpackChunkdart_frog_docs||[]).push([[437],{5194:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"basics/routes","title":"\ud83d\ude8f Routes","description":"Overview \u2728","source":"@site/docs/basics/routes.md","sourceDirName":"basics","slug":"/basics/routes","permalink":"/docs/basics/routes","draft":false,"unlisted":false,"editUrl":"https://github.com/VeryGoodOpenSource/dart_frog/tree/main/docs/docs/basics/routes.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"\ud83d\ude8f Routes"},"sidebar":"docs","previous":{"title":"Basics","permalink":"/docs/category/basics"},"next":{"title":"\ud83c\udf54 Middleware","permalink":"/docs/basics/middleware"}}');var s=t(4848),o=t(8453);const a={sidebar_position:1,title:"\ud83d\ude8f Routes"},d="Routes \ud83d\ude8f",i={},c=[{value:"Overview \u2728",id:"overview-",level:2},{value:"Creating Routes",id:"creating-routes",level:2},{value:"Requests \ud83d\udce5",id:"requests-",level:2},{value:"Request Context",id:"request-context",level:3},{value:"HTTP Method",id:"http-method",level:3},{value:"Headers",id:"headers",level:3},{value:"Query Parameters",id:"query-parameters",level:3},{value:"Body",id:"body",level:3},{value:"JSON",id:"json",level:4},{value:"Form Data",id:"form-data",level:4},{value:"Responses \ud83d\udce4",id:"responses-",level:2},{value:"Status Code",id:"status-code",level:3},{value:"Headers",id:"headers-1",level:3},{value:"Body",id:"body-1",level:3},{value:"Dynamic Routes \ud83c\udf13",id:"dynamic-routes-",level:2},{value:"Wildcard Routes \u267e",id:"wildcard-routes-",level:2},{value:"Route Conflicts \ud83d\udca5",id:"route-conflicts-",level:2},{value:"Rogue Routes \ud83e\udd77",id:"rogue-routes-",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"routes-",children:"Routes \ud83d\ude8f"})}),"\n",(0,s.jsx)(n.h2,{id:"overview-",children:"Overview \u2728"}),"\n",(0,s.jsxs)(n.p,{children:["In Dart Frog, a route consists of an ",(0,s.jsx)(n.code,{children:"onRequest"})," function (called a route handler) exported from a ",(0,s.jsx)(n.code,{children:".dart"})," file in the ",(0,s.jsx)(n.code,{children:"routes"})," directory. Each endpoint is associated with a routes file based on its file name. Files named, ",(0,s.jsx)(n.code,{children:"index.dart"})," will correspond to a ",(0,s.jsx)(n.code,{children:"/"})," endpoint."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, if you create ",(0,s.jsx)(n.code,{children:"routes/hello.dart"})," that exports an ",(0,s.jsx)(n.code,{children:"onRequest"})," method like below, it will be accessible at ",(0,s.jsx)(n.code,{children:"/hello"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response(body: 'Hello World');\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"creating-routes",children:"Creating Routes"}),"\n",(0,s.jsxs)(n.p,{children:["Managing routes in Dart Frog is essentially as simple as managing the file structure under ",(0,s.jsx)(n.code,{children:"/routes"}),". To help on the creation of routes, Dart Frog provides a CLI command to generate a new route."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'# will create routes/hello.dart\ndart_frog new route "/hello"\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Install and use the ",(0,s.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=VeryGoodVentures.dart-frog",children:"Dart Frog VS Code extension"})," to easily create new routes within your IDE."]})}),"\n",(0,s.jsx)(n.h2,{id:"requests-",children:"Requests \ud83d\udce5"}),"\n",(0,s.jsx)(n.p,{children:"All route handlers have access to information regarding the inbound request. In this section, we'll take a look at various ways in which we can interact with the inbound request."}),"\n",(0,s.jsx)(n.h3,{id:"request-context",children:"Request Context"}),"\n",(0,s.jsxs)(n.p,{children:["All route handlers have access to a ",(0,s.jsx)(n.code,{children:"RequestContext"})," which can be used to access the incoming request as well as dependencies provided to the request context (",(0,s.jsx)(n.a,{href:"/docs/basics/middleware",children:"see middleware"}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  // Access the incoming request.\n  final request = context.request;\n\n  // Do stuff with the incoming request...\n\n  // Return a response.\n  return Response(body: 'Hello World');\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"http-method",children:"HTTP Method"}),"\n",(0,s.jsxs)(n.p,{children:["A single route handler is responsible for handling inbound requests with any HTTP method. The HTTP method of the inbound request can be accessed via ",(0,s.jsx)(n.code,{children:"context.request.method"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  // Access the incoming request.\n  final request = context.request;\n\n  // Access the HTTP method.\n  final method = request.method.value;\n\n  return Response(body: 'This is a $method request.');\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We can make a ",(0,s.jsx)(n.code,{children:"GET"})," request to the above handler and we should see:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"curl --request GET --url http://localhost:8080\n\nThis is a GET request.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We can make a ",(0,s.jsx)(n.code,{children:"POST"})," request to the above handler and we should see:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"curl --request POST --url http://localhost:8080\n\nThis is a POST request.\n"})}),"\n",(0,s.jsx)(n.h3,{id:"headers",children:"Headers"}),"\n",(0,s.jsxs)(n.p,{children:["We can access request headers via ",(0,s.jsx)(n.code,{children:"context.request.headers"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  // Access the incoming request.\n  final request = context.request;\n\n  // Access the headers as a `Map<String, String>`.\n  final headers = request.headers;\n\n  // Do something with the headers...\n\n  return Response(body: 'Hello World');\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"query-parameters",children:"Query Parameters"}),"\n",(0,s.jsxs)(n.p,{children:["We can access query parameters via ",(0,s.jsx)(n.code,{children:"context.request.uri.queryParameters"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  // Access the incoming request.\n  final request = context.request;\n\n  // Access the query parameters as a `Map<String, String>`.\n  final params = request.uri.queryParameters;\n\n  // Get the value for the key `name`.\n  // Default to `there` if there is no query parameter.\n  final name = params['name'] ?? 'there';\n\n  return Response(body: 'Hi $name');\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"We can make a request to the above handler with no query parameters and we should see:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"curl --request GET --url http://localhost:8080\n\nHi there\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We can make a another request to the above handler with ",(0,s.jsx)(n.code,{children:"?name=Dash"})," and we should see:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"curl --request GET --url http://localhost:8080?name=Dash\n\nHi Dash\n"})}),"\n",(0,s.jsx)(n.h3,{id:"body",children:"Body"}),"\n",(0,s.jsxs)(n.p,{children:["We can access the body of the incoming request via ",(0,s.jsx)(n.code,{children:"context.request.body"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nFuture<Response> onRequest(RequestContext context) async {\n  // Access the incoming request.\n  final request = context.request;\n\n  // Access the request body as a `String`.\n  final body = await request.body();\n\n  return Response(body: 'The body is \"$body\".');\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"The request body can only be read once."})}),"\n",(0,s.jsx)(n.p,{children:"We can make a request to the above handler with some data and we should see:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"curl --request POST \\\n  --url http://localhost:8080 \\\n  --header 'Content-Type: text/plain' \\\n  --data 'Hello!'\n\nThe body is \"Hello!\".\n"})}),"\n",(0,s.jsx)(n.h4,{id:"json",children:"JSON"}),"\n",(0,s.jsxs)(n.p,{children:["When the ",(0,s.jsx)(n.code,{children:"Content-Type"})," is ",(0,s.jsx)(n.code,{children:"application/json"}),", you can use ",(0,s.jsx)(n.code,{children:"context.request.json()"})," to read the contents of the request body as a ",(0,s.jsx)(n.code,{children:"Map<String, dynamic>"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nFuture<Response> onRequest(RequestContext context) async {\n  // Access the incoming request.\n  final request = context.request;\n\n  // Access the request body as parsed `JSON`.\n  final body = await request.json();\n\n  return Response.json(body: {'request_body': body});\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"We can make a request to the above handler with some data and we should see:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'curl --request POST \\\n  --url http://localhost:8080/example \\\n  --header \'Content-Type: application/json\' \\\n  --data \'{\n  "hello": "world"\n}\'\n\n{\n  "request_body": {\n    "hello": "world"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"form-data",children:"Form Data"}),"\n",(0,s.jsxs)(n.p,{children:["When the ",(0,s.jsx)(n.code,{children:"Content-Type"})," is ",(0,s.jsx)(n.code,{children:"application/x-www-form-urlencoded"})," or ",(0,s.jsx)(n.code,{children:"multipart/form-data"}),", you can use ",(0,s.jsx)(n.code,{children:"context.request.formData()"})," to read the contents of the request body as ",(0,s.jsx)(n.code,{children:"FormData"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nFuture<Response> onRequest(RequestContext context) async {\n  // Access the incoming request.\n  final request = context.request;\n\n  // Access the request body form data.\n  final formData = await request.formData();\n\n  return Response.json(body: {'form_data': formData.fields});\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'curl --request POST \\\n  --url http://localhost:8080/example \\\n  --data hello=world\n\n{\n  "form_data": {\n    "hello": "world"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"If the request is a multipart form data request you can also access files that were uploaded."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nFuture<Response> onRequest(RequestContext context) async {\n  // Access the incoming request.\n  final request = context.request;\n\n  // Access the request body form data.\n  final formData = await request.formData();\n\n  // Retrieve an uploaded file.\n  final photo = formData.files['photo'];\n\n  if (photo == null || photo.contentType.mimeType != contentTypePng.mimeType) {\n    return Response(statusCode: HttpStatus.badRequest);\n  }\n\n  return Response.json(\n    body: {'message': 'Successfully uploaded ${photo.name}'},\n  );\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'curl --request POST \\\n  --url http://localhost:8080/example \\\n  --form photo=@photo.png\n\n{\n  "message": "Successfully uploaded photo.png"\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"formData"})," API is available since ",(0,s.jsx)(n.code,{children:"dart_frog >=0.3.1"})," and the support for multipart form data was added in ",(0,s.jsx)(n.code,{children:"dart_frog >=0.3.4"}),"."]})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"request.formData()"})," will throw a ",(0,s.jsx)(n.code,{children:"StateError"})," if the MIME type is not ",(0,s.jsx)(n.code,{children:"application/x-www-form-urlencoded"})," or ",(0,s.jsx)(n.code,{children:"multipart/form-data"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"responses-",children:"Responses \ud83d\udce4"}),"\n",(0,s.jsx)(n.p,{children:"All route handlers must return an outbound response. In this section, we'll take a look at various ways in which we can create a custom response."}),"\n",(0,s.jsx)(n.h3,{id:"status-code",children:"Status Code"}),"\n",(0,s.jsxs)(n.p,{children:["We can customize the status code of the response via the ",(0,s.jsx)(n.code,{children:"statusCode"})," parameter on the ",(0,s.jsx)(n.code,{children:"Response"})," object:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response(statusCode: 204);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"headers-1",children:"Headers"}),"\n",(0,s.jsxs)(n.p,{children:["We can customize the headers of the response via the ",(0,s.jsx)(n.code,{children:"headers"})," parameter on the ",(0,s.jsx)(n.code,{children:"Response"})," object:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response(headers: {'hello': 'world'});\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"body-1",children:"Body"}),"\n",(0,s.jsxs)(n.p,{children:["We've seen examples of returning a custom body via the default ",(0,s.jsx)(n.code,{children:"Response"})," constructor:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response(body: 'Hello World');\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In addition, we can return JSON via the ",(0,s.jsx)(n.code,{children:"Response.json"})," constructor:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response.json(\n    body: <String, dynamic>{'hello': 'world!'},\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We can also return any Dart object in the ",(0,s.jsx)(n.code,{children:"body"})," of the ",(0,s.jsx)(n.code,{children:"Response.json"})," constructor and it will be serialized correctly as long as it has a ",(0,s.jsx)(n.code,{children:"toJson"})," method that returns a ",(0,s.jsx)(n.code,{children:"Map<String, dynamic>"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Check out ",(0,s.jsx)(n.a,{href:"https://pub.dev/packages/json_serializable",children:(0,s.jsx)(n.code,{children:"json_serializable"})})," to automate the ",(0,s.jsx)(n.code,{children:"toJson"})," generation."]})}),"\n",(0,s.jsxs)(n.admonition,{type:"caution",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"json_serializable"})," uses ",(0,s.jsx)(n.a,{href:"https://pub.dev/packages/build_runner",children:(0,s.jsx)(n.code,{children:"build_runner"})})," which expects code to be within the ",(0,s.jsx)(n.code,{children:"lib"})," directory. In order for the code generation step to work, make sure the ",(0,s.jsx)(n.code,{children:"User"})," model below is located somewhere within the top level ",(0,s.jsx)(n.code,{children:"lib"})," directory."]}),(0,s.jsx)(n.p,{children:"For example:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u251c\u2500\u2500 lib\n\u2502   \u2514\u2500\u2500 models\n\u2502       \u2514\u2500\u2500 user.dart\n\u2514\u2500\u2500 routes\n"})})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:json_annotation/json_annotation.dart';\n\npart 'user.g.dart';\n\n@JsonSerializable()\nclass User {\n  const User({required this.name, required this.age});\n\n  final String name;\n  final int age;\n\n  Map<String, dynamic> toJson() => _$UserToJson(this);\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response.json(\n    body: User(name: 'Dash', age: 42),\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Route handlers can be synchronous or asynchronous. To convert the above route handlers to async, we just need to update the return type from ",(0,s.jsx)(n.code,{children:"Response"})," to ",(0,s.jsx)(n.code,{children:"Future<Response>"}),". We can add the ",(0,s.jsx)(n.code,{children:"async"})," keyword in order to ",(0,s.jsx)(n.code,{children:"await"})," futures within our handler before returning a ",(0,s.jsx)(n.code,{children:"Response"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nFuture<Response> onRequest(RequestContext context) async {\n  final result = await _someFuture();\n  return Response(body: 'Result is: $result!');\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"dynamic-routes-",children:"Dynamic Routes \ud83c\udf13"}),"\n",(0,s.jsxs)(n.p,{children:["Dart Frog supports dynamic routes. For example, if you create a file called ",(0,s.jsx)(n.code,{children:"routes/posts/[id].dart"}),", then it will be accessible at ",(0,s.jsx)(n.code,{children:"/posts/1"}),", ",(0,s.jsx)(n.code,{children:"/posts/2"}),", and so on."]}),"\n",(0,s.jsxs)(n.p,{children:["Routing parameters are forwarded to the ",(0,s.jsx)(n.code,{children:"onRequest"})," method as seen below."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context, String id) {\n  return Response(body: 'post id: $id');\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Dart Frog also supports nested dynamic routes. For example, if you create a file called, ",(0,s.jsx)(n.code,{children:"routes/users/[userId]/posts/[postId].dart"}),", then it will be accessible at ",(0,s.jsx)(n.code,{children:"/users/alice/posts/1"}),", ",(0,s.jsx)(n.code,{children:"/users/sam/posts/42"}),", and so on."]}),"\n",(0,s.jsxs)(n.p,{children:["Just as with all dynamic routes, routing parameters are forwarded to the ",(0,s.jsx)(n.code,{children:"onRequest"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"Response onRequest(RequestContext context, String userId, String postId) {\n  return Response(body: 'user id: $userId, post id: $postId');\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"wildcard-routes-",children:"Wildcard Routes \u267e"}),"\n",(0,s.jsxs)(n.p,{children:["Dart Frog supports wildcard routes. For example, if you create a file called ",(0,s.jsx)(n.code,{children:"routes/posts/[...page].dart"}),", then it will be accessible at any path that starts with ",(0,s.jsx)(n.code,{children:"/posts/"}),", with any number of levels, allowing it to called from ",(0,s.jsx)(n.code,{children:"/posts/today"}),", ",(0,s.jsx)(n.code,{children:"/posts/features/starred"}),", and so forth."]}),"\n",(0,s.jsxs)(n.p,{children:["Routing parameters are forwarded to the ",(0,s.jsx)(n.code,{children:"onRequest"})," method as seen below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context, String page) {\n  return Response(body: 'post page: $page');\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Wildcard routes ",(0,s.jsx)(n.strong,{children:"must"})," be unique leaf routes on their route node, meaning that they need to be a file, and they need to be the only route in their folder."]})}),"\n",(0,s.jsx)(n.h2,{id:"route-conflicts-",children:"Route Conflicts \ud83d\udca5"}),"\n",(0,s.jsx)(n.p,{children:"When defining routes, it's possible to encounter route conflicts."}),"\n",(0,s.jsx)(n.p,{children:"A route conflict occurs when more than one route handler resolves to the same endpoint."}),"\n",(0,s.jsx)(n.p,{children:"For example, given the following file structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u251c\u2500\u2500 routes\n\u2502\xa0\xa0 \u251c\u2500\u2500 api\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 index.dart\n\u2502\xa0\xa0 \u2514\u2500\u2500 api.dart\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Both ",(0,s.jsx)(n.code,{children:"routes/api/index.dart"})," and ",(0,s.jsx)(n.code,{children:"routes/api.dart"})," resolve the the ",(0,s.jsx)(n.code,{children:"/api"})," endpoint."]}),"\n",(0,s.jsxs)(n.p,{children:["When running the development server via ",(0,s.jsx)(n.code,{children:"dart_frog dev"}),", Dart Frog will report route conflicts while the development server is running. You can resolve the conflicts and hot reload will allow you to continue development without having to restart the server."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"[hotreload] - Application reloaded.\n\nRoute conflict detected. `routes/api.dart` and `routes/api/index.dart` both resolve to `/api`.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When generating a production build via ",(0,s.jsx)(n.code,{children:"dart_frog build"}),", Dart Frog will report all detected route conflicts and fail the build if one or more route conflicts are detected."]}),"\n",(0,s.jsx)(n.h2,{id:"rogue-routes-",children:"Rogue Routes \ud83e\udd77"}),"\n",(0,s.jsx)(n.p,{children:"Similar to route conflicts, it's also possible to run into rogue routes when working with Dart Frog."}),"\n",(0,s.jsx)(n.p,{children:"A route is considered rogue when it is defined outside of an existing subdirectory with the same name."}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u251c\u2500\u2500 routes\n\u2502   \u251c\u2500\u2500 api\n\u2502   \u2502   \u2514\u2500\u2500 example.dart\n\u2502   \u251c\u2500\u2500 api.dart\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the above scenario, ",(0,s.jsx)(n.code,{children:"routes/api.dart"})," is rogue because it is defined outside of the existing ",(0,s.jsx)(n.code,{children:"api"})," directory."]}),"\n",(0,s.jsxs)(n.p,{children:["To correct this, ",(0,s.jsx)(n.code,{children:"api.dart"})," should be renamed to ",(0,s.jsx)(n.code,{children:"index.dart"})," and placed within the ",(0,s.jsx)(n.code,{children:"api"})," directory like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u251c\u2500\u2500 routes\n\u2502   \u251c\u2500\u2500 api\n\u2502   \u2502   \u251c\u2500\u2500 example.dart\n\u2502   \u2502   \u2514\u2500\u2500 index.dart\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When running the development server via ",(0,s.jsx)(n.code,{children:"dart_frog dev"}),", Dart Frog will report rogue routes while the development server is running. You can resolve the issues and hot reload will allow you to continue development without having to restart the server."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"[hotreload] - Application reloaded.\n\nRogue route detected. `routes/api.dart` should be renamed to `routes/api/index.dart`.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When generating a production build via ",(0,s.jsx)(n.code,{children:"dart_frog build"}),", Dart Frog will report all detected rogue routes and fail the build if one or more rogue routes are detected."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var r=t(6540);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);