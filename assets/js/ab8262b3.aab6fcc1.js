"use strict";(self.webpackChunkdart_frog_docs=self.webpackChunkdart_frog_docs||[]).push([[841],{3185:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>c});const d=JSON.parse('{"id":"basics/dependency-injection","title":"\ud83d\udc89 Dependency Injection","description":"Middleware can be used to inject dependencies into a RequestContext via a provider.","source":"@site/docs/basics/dependency-injection.md","sourceDirName":"basics","slug":"/basics/dependency-injection","permalink":"/docs/basics/dependency-injection","draft":false,"unlisted":false,"editUrl":"https://github.com/VeryGoodOpenSource/dart_frog/tree/main/docs/docs/basics/dependency-injection.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"\ud83d\udc89 Dependency Injection"},"sidebar":"docs","previous":{"title":"\ud83c\udf54 Middleware","permalink":"/docs/basics/middleware"},"next":{"title":"\ud83e\uddea Testing","permalink":"/docs/basics/testing"}}');var i=r(4848),t=r(8453);const a={sidebar_position:3,title:"\ud83d\udc89 Dependency Injection"},o="Dependency Injection \ud83d\udc89",s={},c=[{value:"Provider",id:"provider",level:2},{value:"Basics",id:"basics",level:3},{value:"Extracting Providers",id:"extracting-providers",level:3},{value:"Providing Asynchronous Values",id:"providing-asynchronous-values",level:3},{value:"Lazy Initialization",id:"lazy-initialization",level:3},{value:"Caching",id:"caching",level:3},{value:"Order matters",id:"order-matters",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"dependency-injection-",children:"Dependency Injection \ud83d\udc89"})}),"\n",(0,i.jsxs)(n.p,{children:["Middleware can be used to inject dependencies into a ",(0,i.jsx)(n.code,{children:"RequestContext"})," via a ",(0,i.jsx)(n.code,{children:"provider"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"provider",children:"Provider"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"provider"})," is a type of middleware that can create and provide an instance of type ",(0,i.jsx)(n.code,{children:"T"})," to the request context. The ",(0,i.jsx)(n.code,{children:"create"})," callback is called lazily and the injected ",(0,i.jsx)(n.code,{children:"RequestContext"})," can be used to perform additional lookups to access values provided upstream."]}),"\n",(0,i.jsx)(n.h3,{id:"basics",children:"Basics"}),"\n",(0,i.jsxs)(n.p,{children:["In the following example, we'll use a ",(0,i.jsx)(n.code,{children:"provider"})," to inject a ",(0,i.jsx)(n.code,{children:"String"})," into our request context."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nHandler middleware(Handler handler) {\n  return handler.use(provider<String>((context) => 'Welcome to Dart Frog!'));\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We can later access the provided value from within a route handler using ",(0,i.jsx)(n.code,{children:"context.read<T>()"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  final greeting = context.read<String>();\n  return Response(body: greeting);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"extracting-providers",children:"Extracting Providers"}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, we defined the ",(0,i.jsx)(n.code,{children:"provider"})," inline. This is fine for simple cases, but for more complex providers or providers which you want to reuse, it can be helpful to extract the provider to its own file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Middleware greetingProvider() {\n  return provider<String>((context) => 'Hello World');\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then, we can import and use the provider in one or more middleware:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Handler middleware(Handler handler) {\n  return handler.use(greetingProvider());\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"providing-asynchronous-values",children:"Providing Asynchronous Values"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"provider"})," can also be used to inject asynchronous values -- we just need to change the generic type to a ",(0,i.jsx)(n.code,{children:"Future"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Middleware asyncGreetingProvider() {\n  return provider<Future<String>>((context) async => 'Hello World');\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"We can then use the provider in one or more middleware just as before:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Handler middleware(Handler handler) {\n  return handler.use(asyncGreetingProvider());\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Later, we can read the async value from a route handler via ",(0,i.jsx)(n.code,{children:"context.read"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<Response> onRequest(RequestContext context) async {\n  final value = await context.read<Future<String>>();\n  return Response(body: value);\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["When accessing a ",(0,i.jsx)(n.code,{children:"Future"})," via ",(0,i.jsx)(n.code,{children:"context.read"})," be sure to specify the ",(0,i.jsx)(n.code,{children:"Future"})," as the generic type and ",(0,i.jsx)(n.code,{children:"await"})," the result."]})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsx)(n.p,{children:"You can create a custom extension if you prefer:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"extension ReadAsync on RequestContext {\n  Future<T> readAsync<T extends Object>() => read<Future<T>>();\n}\n"})}),(0,i.jsxs)(n.p,{children:["With the above extension, you can access the provided ",(0,i.jsx)(n.code,{children:"Future"})," like:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<Response> onRequest(RequestContext context) async {\n  final value = await context.readAsync<String>();\n  return Response(body: value);\n}\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"lazy-initialization",children:"Lazy Initialization"}),"\n",(0,i.jsxs)(n.p,{children:["By default, ",(0,i.jsx)(n.code,{children:"provider"})," creates the provided value only when it is accessed. For example, given the following middleware:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nHandler middleware(Handler handler) {\n  return handler.use(\n    provider<String>((context) {\n      // This code will never execute if `context.read<String>()` isn't called.\n      print('create!');\n      return 'Welcome to Dart Frog!';\n    }),\n  );\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If we have a route handler that never invokes ",(0,i.jsx)(n.code,{children:"context.read<String>()"}),", our value will never be created, and ",(0,i.jsx)(n.code,{children:"create!"})," will never be logged:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) => Response();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"caching",children:"Caching"}),"\n",(0,i.jsxs)(n.p,{children:["By default, a provided value will be created when it is accessed. This means that each time you read a value via ",(0,i.jsx)(n.code,{children:"context.read"}),", the associated ",(0,i.jsx)(n.code,{children:"create"})," method will be invoked."]}),"\n",(0,i.jsx)(n.p,{children:"As a result, you may wish to cache a provided value so that it isn't unnecessarily recreated on each read. We can do this quite easily by defining a provide value which we use to reference the provided value once it is created."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"String? _greeting;\n\nMiddleware cachedGreetingProvider() {\n  return provider<String>((context) => _greeting ??= 'Hello World');\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The cached ",(0,i.jsx)(n.code,{children:"_greeting"})," is private so that it can only be accessed within the context of this provider."]})}),"\n",(0,i.jsx)(n.p,{children:"This pattern can also be applied to async providers:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"String? _greeting;\n\nMiddleware cachedAsyncGreetingProvider() {\n  return provider<Future<String>>((context) async => _greeting ??= 'Hello World');\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"With the above implementations, the greeting will only be computed once and the cached value will be used for the duration of the application lifecycle."}),"\n",(0,i.jsx)(n.h3,{id:"order-matters",children:"Order matters"}),"\n",(0,i.jsxs)(n.p,{children:["In a real life application you will find yourself adding multiple ",(0,i.jsx)(n.code,{children:"providers"})," to your project."]}),"\n",(0,i.jsxs)(n.p,{children:["Some ",(0,i.jsx)(n.code,{children:"providers"})," ",(0,i.jsx)(n.strong,{children:"will depend"})," on others, as with any application relying on dependency injection."]}),"\n",(0,i.jsxs)(n.p,{children:["Let's take the example of a ",(0,i.jsx)(n.code,{children:"Car"})," that depends on a ",(0,i.jsx)(n.code,{children:"Wheel"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["We will have two ",(0,i.jsx)(n.code,{children:"providers"})," where the second one depends on the first one for it to work:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["A first ",(0,i.jsx)(n.code,{children:"provider"}),", called ",(0,i.jsx)(n.code,{children:"wheelMiddlewareProvider"}),", that creates the ",(0,i.jsx)(n.code,{children:"Wheel"})," object"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final _wheel = Wheel();\n\n/// Provides a [Wheel] instance.\nMiddleware wheelMiddlewareProvider() {\n  return provider<Wheel>(\n    (_) => _wheel,\n  );\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["A second ",(0,i.jsx)(n.code,{children:"provider"}),", called ",(0,i.jsx)(n.code,{children:"carMiddlewareProvider"}),", that provides a ",(0,i.jsx)(n.code,{children:"Car"})," object"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class Car {\n  final Wheel wheel;\n\n  Car({\n    required this.wheel;\n  });\n}\n\n/// Middleware to create the Car object\nMiddleware carMiddlewareProvider() {\n  return provider<Car>(\n    (context) => Car(\n      wheel: context.read<Wheel>(),\n    ),\n  );\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["At this point, it seems clear that ",(0,i.jsx)(n.code,{children:"carMiddlewareProvider"})," depends on ",(0,i.jsx)(n.code,{children:"wheelMiddlewareProvider"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["When you try to access the instance of ",(0,i.jsx)(n.code,{children:"Car"})," using ",(0,i.jsx)(n.code,{children:"context.read<Car>()"}),", here is what will happen:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Dart Frog"})," will try to create the instance and return it. To do so, it will create a ",(0,i.jsx)(n.code,{children:"Car"})," object and to fulfill its ",(0,i.jsx)(n.code,{children:"wheel"})," parameter"]}),"\n",(0,i.jsxs)(n.li,{children:['It will "look above" in the dependency graph for a provider of ',(0,i.jsx)(n.code,{children:"Wheel"})]}),"\n",(0,i.jsxs)(n.li,{children:["It will find it with ",(0,i.jsx)(n.code,{children:"wheelMiddlewareProvider"}),", and so on."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'This is how dependency injections works, but let\'s clarify what "look above" means.'}),"\n",(0,i.jsxs)(n.p,{children:["We have to tell Dart Frog how to build a ",(0,i.jsx)(n.code,{children:"Wheel"})," ",(0,i.jsx)(n.strong,{children:"before"})," it builds a ",(0,i.jsx)(n.code,{children:"Car"}),". We do that by defining the order of the providers."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["In Dart Frog, dependencies are resolved from ",(0,i.jsx)(n.strong,{children:"bottom"})," to ",(0,i.jsx)(n.strong,{children:"top"})]})}),"\n",(0,i.jsxs)(n.p,{children:["So if provider ",(0,i.jsx)(n.code,{children:"B"})," depends on provider ",(0,i.jsx)(n.code,{children:"A"}),", you will have to declare them as followed:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Handler middleware(Handler handler) {\n  return handler\n      .use(B())\n      .use(A())\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the example we gave at the beginning where ",(0,i.jsx)(n.code,{children:"carMiddlewareProvider"})," depends on ",(0,i.jsx)(n.code,{children:"wheelMiddlewareProvider"})," we know it will work when we provided them like so:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Handler middleware(Handler handler) {\n  return handler\n      .use(carMiddlewareProvider())\n      .use(wheelMiddlewareProvider())\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"But if we change the order of the providers it will not work:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Handler middleware(Handler handler) {\n  return handler\n      // This won't work because Dart Frog is bottom top\n      .use(wheelMiddlewareProvider())\n      .use(carMiddlewareProvider())\n}\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["Right now, there is an issue about this ",(0,i.jsx)(n.a,{href:"https://github.com/VeryGoodOpenSource/dart_frog/issues/745",children:"fix: Improve dependency injection order #745"})," because some other DI frameworks are working top to bottom and dart_frog is bottom to top."]}),(0,i.jsx)(n.p,{children:"So you might want to keep that in mind for future releases, but as it would be a breaking change, the release version will reflect this."})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var d=r(6540);const i={},t=d.createContext(i);function a(e){const n=d.useContext(t);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),d.createElement(t.Provider,{value:n},e.children)}}}]);