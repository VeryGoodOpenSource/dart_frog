"use strict";(self.webpackChunkdart_frog_docs=self.webpackChunkdart_frog_docs||[]).push([[933],{6401:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"advanced/web_socket","title":"\ud83d\udd0c WebSockets","description":"Dart Frog recently introduced package:dartfrogwebsocket to make working with WebSockets easier.","source":"@site/docs/advanced/web_socket.md","sourceDirName":"advanced","slug":"/advanced/web_socket","permalink":"/docs/advanced/web_socket","draft":false,"unlisted":false,"editUrl":"https://github.com/VeryGoodOpenSource/dart_frog/tree/main/docs/docs/advanced/web_socket.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"\ud83d\udd0c WebSockets"},"sidebar":"docs","previous":{"title":"\ud83d\udc33 Custom Dockerfile","permalink":"/docs/advanced/custom_dockerfile"},"next":{"title":"\ud83d\udd0b Powered By Header","permalink":"/docs/advanced/powered_by_header"}}');var r=t(4848),a=t(8453);const o={sidebar_position:4,title:"\ud83d\udd0c WebSockets"},c="WebSockets \ud83d\udd0c",i={},d=[{value:"Installation",id:"installation",level:2},{value:"Creating a WebSocket Handler",id:"creating-a-websocket-handler",level:2},{value:"Receiving Messages from the Client",id:"receiving-messages-from-the-client",level:2},{value:"Sending Messages from the Client",id:"sending-messages-from-the-client",level:2},{value:"Sending Messages from the Server",id:"sending-messages-from-the-server",level:2},{value:"Receiving Messages from the Server",id:"receiving-messages-from-the-server",level:2},{value:"Simplifying Things Further",id:"simplifying-things-further",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"websockets-",children:"WebSockets \ud83d\udd0c"})}),"\n",(0,r.jsxs)(n.p,{children:["Dart Frog recently introduced ",(0,r.jsx)(n.a,{href:"https://pub.dev/packages/dart_frog_web_socket",children:(0,r.jsx)(n.code,{children:"package:dart_frog_web_socket"})})," to make working with WebSockets easier."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"We added WebSocket support as a separate package to keep the Dart Frog package lightweight, containing only core functionality. In the future, we may add additional packages in order to extend the Dart Frog ecosystem without bloating the core."})}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(n.p,{children:["To get started, add the ",(0,r.jsx)(n.code,{children:"dart_frog_web_socket"})," package as a dependency to your existing Dart Frog project:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"dart pub add dart_frog_web_socket\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-websocket-handler",children:"Creating a WebSocket Handler"}),"\n",(0,r.jsxs)(n.p,{children:["We can use the ",(0,r.jsx)(n.code,{children:"webSocketHandler"})," from ",(0,r.jsx)(n.code,{children:"package:dart_frog_web_socket"})," to manage WebSocket connections."]}),"\n",(0,r.jsx)(n.p,{children:"You can either create a new route handler or integrate with an existing handler. For simplicity, we'll first take a look at adding a new route handler specifically for WebSocket connections."}),"\n",(0,r.jsxs)(n.p,{children:["Start by creating a new route, ",(0,r.jsx)(n.code,{children:"routes/ws.dart"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Next, instead of handling the request directly, we can create a WebSocket handler:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\nimport 'package:dart_frog_web_socket/dart_frog_web_socket.dart';\n\nFuture<Response> onRequest(RequestContext context) async {\n  final handler = webSocketHandler((channel, protocol) {\n    // TODO: react to new connections.\n  });\n  return handler(context);\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["We need to refactor the request handler to be ",(0,r.jsx)(n.code,{children:"async"})," and return a ",(0,r.jsx)(n.code,{children:"Future<Response>"})," when using the ",(0,r.jsx)(n.code,{children:"webSocketHandler"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"webSocketHandler"})," will handle upgrading ",(0,r.jsx)(n.code,{children:"HTTP"})," requests to WebSocket connections and provides an ",(0,r.jsx)(n.code,{children:"onConnection"})," callback which exposes the ",(0,r.jsx)(n.code,{children:"WebSocketChannel"})," as well as an optional subprotocol."]}),"\n",(0,r.jsx)(n.h2,{id:"receiving-messages-from-the-client",children:"Receiving Messages from the Client"}),"\n",(0,r.jsxs)(n.p,{children:["Next, we can subscribe to the stream of messages exposed by the ",(0,r.jsx)(n.code,{children:"WebSocketChannel"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\nimport 'package:dart_frog_web_socket/dart_frog_web_socket.dart';\n\nFuture<Response> onRequest(RequestContext context) async {\n  final handler = webSocketHandler((channel, protocol) {\n    channel.stream.listen((message) {\n      // Handle incoming client messages.\n      print(message);\n    });\n  });\n  return handler(context);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"For simplicity, we are just printing all messages sent by connected clients."}),"\n",(0,r.jsx)(n.p,{children:"Before moving on, let's verify that a client is able to establish a connection and send a message to our server. To do this, we'll create a simple client in Dart."}),"\n",(0,r.jsx)(n.h2,{id:"sending-messages-from-the-client",children:"Sending Messages from the Client"}),"\n",(0,r.jsxs)(n.p,{children:["Create a new directory called ",(0,r.jsx)(n.code,{children:"example"})," at the project root and create a ",(0,r.jsx)(n.code,{children:"pubspec.yaml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"name: example\npublish_to: none\n\nenvironment:\n  sdk: '>=2.18.0 <3.0.0'\n\ndependencies:\n  web_socket_channel: ^2.0.0\n"})}),"\n",(0,r.jsx)(n.p,{children:"Next, install the dependencies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"dart pub get\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now, create a ",(0,r.jsx)(n.code,{children:"main.dart"})," with the following contents:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:web_socket_channel/web_socket_channel.dart';\n\nvoid main() {\n  // Connect to the remote WebSocket endpoint.\n  final uri = Uri.parse('ws://localhost:8080/ws');\n  final channel = WebSocketChannel.connect(uri);\n\n  // Send a message to the server.\n  channel.sink.add('hello');\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We're using ",(0,r.jsx)(n.a,{href:"https://pub.dev/packages/web_socket_channel",children:(0,r.jsx)(n.code,{children:"package:web_socket_channel"})})," to connect to our Dart Frog ",(0,r.jsx)(n.code,{children:"/ws"})," endpoint. We can then send messages to the server by calling ",(0,r.jsx)(n.code,{children:"add"})," on the ",(0,r.jsx)(n.code,{children:"WebSocketChannel"})," sink."]}),"\n",(0,r.jsx)(n.p,{children:"We can run our Dart Frog dev server now:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"dart_frog dev\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Be sure to run ",(0,r.jsx)(n.code,{children:"dart_frog dev"})," from the project root."]})}),"\n",(0,r.jsx)(n.p,{children:"Once the server is running in a new terminal, we can run our example client to test the connection:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"dart example/main.dart\n"})}),"\n",(0,r.jsx)(n.p,{children:"We should see the message we sent in our server logs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u2713 Running on http://localhost:8080 (1.3s)\nThe Dart VM service is listening on http://127.0.0.1:8181/YKEF_nbwOpM=/\nThe Dart DevTools debugger and profiler is available at: http://127.0.0.1:8181/YKEF_nbwOpM=/devtools/#/?uri=ws%3A%2F%2F127.0.0.1%3A8181%2FYKEF_nbwOpM%3D%2Fws\n[hotreload] Hot reload is enabled.\nhello\n"})}),"\n",(0,r.jsx)(n.h2,{id:"sending-messages-from-the-server",children:"Sending Messages from the Server"}),"\n",(0,r.jsx)(n.p,{children:"Now, let's send a message back to the client from the server. We can do that by adding a message to the channel sink on the server just like we previously did on the client."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\nimport 'package:dart_frog_web_socket/dart_frog_web_socket.dart';\n\nFuture<Response> onRequest(RequestContext context) async {\n  final handler = webSocketHandler((channel, protocol) {\n    channel.stream.listen((message) {\n      // Handle incoming client messages.\n      print(message);\n    });\n\n    // Send a message back to the client.\n    channel.sink.add('hi');\n  });\n  return handler(context);\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"receiving-messages-from-the-server",children:"Receiving Messages from the Server"}),"\n",(0,r.jsx)(n.p,{children:"Lastly, we need to update the client code to subscribe to messages from the server."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:web_socket_channel/web_socket_channel.dart';\n\nvoid main() {\n  // Connect to the remote WebSocket endpoint.\n  final uri = Uri.parse('ws://localhost:8080/ws');\n  final channel = WebSocketChannel.connect(uri);\n\n  // Send a message to the server.\n  channel.sink.add('hello');\n\n  // Subscribe to messages from the server.\n  channel.stream.listen((message) {\n    print(message);\n  });\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Once we save all the changes and let the server hot reload, we can run the client code again:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"dart example/main.dart\n"})}),"\n",(0,r.jsx)(n.p,{children:"And we should see the following output:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Server"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[hotreload] Hot reload is enabled.\nhello\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Client"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"hi\n"})}),"\n",(0,r.jsx)(n.h2,{id:"simplifying-things-further",children:"Simplifying Things Further"}),"\n",(0,r.jsx)(n.p,{children:"To make things even simpler, we can refactor the route handler implementation in cases where the route is only managing WebSocket connections:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:dart_frog/dart_frog.dart';\nimport 'package:dart_frog_web_socket/dart_frog_web_socket.dart';\n\nHandler get onRequest {\n  return webSocketHandler((channel, protocol) {\n    channel.stream.listen((message) {\n      // Handle incoming client messages.\n      print(message);\n    });\n\n    // Send a message back to the client.\n    channel.sink.add('hi');\n  });\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"That's it! \ud83c\udf89"}),"\n",(0,r.jsx)(n.p,{children:"We've successfully established a WebSocket connection between the Dart Frog server and a client. We've also demonstrated how messages can be streamed between a server and one or more clients."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(6540);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);